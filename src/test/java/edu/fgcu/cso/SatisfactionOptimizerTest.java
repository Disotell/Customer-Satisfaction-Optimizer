package edu.fgcu.cso;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Test Class For SatisfactionOptimizer.class
 */
public class SatisfactionOptimizerTest {

    SatisfactionOptimizer satisfactionOptimizer;
    private int[][] testMatrix = new int[][]{{1, 2, 3}, {3, 2, 1}, {3, 2, 1}};

    public SatisfactionOptimizerTest() {

    }

    @Before
    public void setup() {
        satisfactionOptimizer = new SatisfactionOptimizer();
    }

    //Constructor Test
    @Test
    public void testSatisfactionOptimizerTestConstructor() {
        SatisfactionOptimizerTest sO = new SatisfactionOptimizerTest();
        assertNotNull(sO);
    }

    //testCalcCSO Tests
    @Test
    public void testCalcCSO() {
        int[] testAfterSolution = new int[]{2, 1, 0};
        int[][] testAfterMatrix = new int[][]{{1, 2, 3}, {3, 2, 1}, {3, 2, 1}};

        int[] testSolutions = satisfactionOptimizer.calcCSO(testMatrix);

        for (int i = 0; i < testMatrix.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterSolution[i] + " Actual: " + testSolutions[i],
                    testAfterSolution[i], testSolutions[i]);

            for (int j = 0; j < testMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterMatrix[i][j] + " Actual: " + testMatrix[i][j],
                        testAfterMatrix[i][j], testMatrix[i][j]);
            }
        }
    }

    @Test
    public void testCalcCSOLargeMatrix() {
        int[][] testLargeMatrix = new int[][]{
                {2, 2, 3, 7, 8, 1, 3, 4, 2, 5, 6, 9},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {2, 2, 3, 7, 8, 1, 2, 3, 2, 4, 5, 8},
                {0, 1, 1, 5, 6, 1, 2, 3, 3, 4, 5, 7},
                {1, 2, 0, 4, 5, 2, 1, 2, 4, 3, 4, 6},
                {2, 3, 1, 4, 5, 2, 0, 1, 4, 2, 3, 6},
                {3, 4, 2, 3, 4, 3, 1, 0, 5, 1, 2, 5},
                {5, 6, 4, 0, 1, 6, 4, 3, 8, 2, 1, 2},
                {6, 7, 5, 1, 0, 7, 5, 4, 9, 3, 2, 1},
                {4, 5, 3, 2, 3, 4, 2, 1, 6, 0, 1, 4},
                {5, 6, 4, 1, 2, 5, 3, 2, 7, 1, 0, 3},
                {2, 1, 3, 7, 8, 2, 4, 5, 1, 6, 7, 9}

        };

        int[][] testAfterMatrix = new int[][]{
                {2, 2, 3, 7, 8, 1, 3, 4, 2, 5, 6, 9},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {2, 2, 3, 7, 8, 1, 2, 3, 2, 4, 5, 8},
                {0, 1, 1, 5, 6, 1, 2, 3, 3, 4, 5, 7},
                {1, 2, 0, 4, 5, 2, 1, 2, 4, 3, 4, 6},
                {2, 3, 1, 4, 5, 2, 0, 1, 4, 2, 3, 6},
                {3, 4, 2, 3, 4, 3, 1, 0, 5, 1, 2, 5},
                {5, 6, 4, 0, 1, 6, 4, 3, 8, 2, 1, 2},
                {6, 7, 5, 1, 0, 7, 5, 4, 9, 3, 2, 1},
                {4, 5, 3, 2, 3, 4, 2, 1, 6, 0, 1, 4},
                {5, 6, 4, 1, 2, 5, 3, 2, 7, 1, 0, 3},
                {2, 1, 3, 7, 8, 2, 4, 5, 1, 6, 7, 9}
        };
        int[] testAfterSolution = new int[]{10, 9, 6, 5, 2, 8, 1, 11, 7, 4, 3, 0};

        int[] testSolutions = satisfactionOptimizer.calcCSO(testLargeMatrix);

        for (int i = 0; i < testLargeMatrix.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterSolution[i] + " Actual: " + testSolutions[i],
                    testAfterSolution[i], testSolutions[i]);

            for (int j = 0; j < testLargeMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterMatrix[i][j] + " Actual: " + testLargeMatrix[i][j],
                        testAfterMatrix[i][j], testLargeMatrix[i][j]);
            }
        }
    }

    @Test
    public void testCalcCSO100by100Matrix() {
        int[][] testLargeMatrix = new int[][]{
                {40, 97, 80, 70, 88, 54, 45, 85, 66, 47, 28, 56, 32, 93, 84, 72, 26, 32, 93, 4, 96, 72, 66, 21, 62, 48, 69, 91, 57, 85, 96, 51, 42, 20, 48, 49, 49, 25, 33, 63, 88, 99, 18, 69, 54, 58, 47, 21, 71, 36, 13, 95, 66, 97, 5, 25, 38, 62, 77, 52, 90, 8, 44, 66, 48, 11, 21, 53, 73, 89, 80, 26, 11, 58, 65, 39, 96, 69, 29, 31, 35, 92, 99, 44, 5, 53, 92, 67, 29, 65, 52, 76, 73, 20, 46, 65, 2, 91, 46, 0},
                {79, 83, 5, 58, 3, 74, 93, 15, 25, 6, 60, 0, 52, 38, 96, 55, 64, 17, 77, 61, 52, 24, 15, 40, 61, 36, 14, 64, 36, 13, 96, 85, 12, 90, 86, 86, 57, 88, 95, 88, 29, 58, 54, 94, 88, 68, 67, 21, 16, 53, 7, 89, 77, 79, 41, 99, 63, 57, 16, 22, 15, 99, 22, 1, 24, 10, 93, 71, 76, 97, 54, 10, 94, 65, 29, 30, 38, 24, 41, 65, 72, 31, 53, 60, 34, 90, 6, 53, 87, 98, 12, 9, 81, 75, 36, 93, 66, 76, 40, 45},
                {91, 43, 35, 73, 18, 74, 87, 28, 42, 72, 85, 59, 53, 34, 88, 22, 26, 57, 71, 66, 29, 44, 1, 67, 32, 23, 59, 66, 7, 92, 49, 0, 72, 35, 53, 25, 10, 10, 21, 95, 45, 94, 28, 24, 79, 8, 96, 35, 21, 92, 51, 11, 28, 87, 29, 5, 71, 37, 82, 59, 47, 73, 77, 51, 30, 54, 72, 47, 65, 24, 23, 40, 41, 48, 92, 42, 21, 65, 14, 42, 35, 27, 51, 3, 80, 86, 86, 90, 6, 80, 78, 33, 65, 52, 56, 75, 10, 2, 89, 14},
                {20, 49, 97, 39, 76, 5, 48, 71, 12, 86, 88, 60, 28, 94, 98, 14, 35, 25, 42, 16, 13, 59, 54, 39, 34, 48, 50, 60, 62, 85, 91, 99, 35, 24, 99, 64, 97, 0, 65, 23, 68, 23, 67, 61, 81, 93, 20, 33, 83, 25, 99, 17, 4, 12, 98, 77, 33, 42, 63, 74, 27, 97, 91, 0, 73, 38, 32, 95, 35, 7, 82, 20, 72, 43, 74, 81, 8, 12, 22, 39, 96, 10, 42, 10, 24, 30, 91, 55, 96, 14, 35, 61, 86, 28, 40, 79, 31, 46, 46, 43},
                {1, 85, 36, 40, 81, 79, 79, 3, 39, 67, 19, 84, 68, 35, 15, 39, 8, 20, 0, 25, 64, 47, 22, 88, 18, 17, 35, 28, 41, 45, 48, 26, 8, 89, 45, 19, 75, 78, 89, 88, 29, 6, 76, 40, 57, 57, 78, 96, 12, 96, 22, 64, 12, 85, 67, 40, 35, 11, 78, 13, 58, 15, 53, 82, 13, 61, 60, 63, 29, 89, 63, 72, 98, 65, 8, 96, 39, 23, 95, 80, 44, 93, 80, 7, 30, 9, 60, 49, 21, 76, 96, 76, 67, 39, 42, 91, 37, 36, 26, 54},
                {4, 15, 15, 51, 50, 72, 52, 23, 84, 58, 66, 96, 96, 95, 18, 59, 39, 66, 31, 75, 96, 87, 10, 24, 40, 29, 88, 7, 95, 14, 98, 15, 32, 97, 27, 49, 66, 56, 62, 89, 30, 53, 19, 0, 8, 98, 33, 94, 46, 13, 93, 77, 81, 31, 6, 29, 48, 82, 57, 60, 46, 59, 17, 82, 84, 10, 88, 13, 28, 7, 53, 6, 13, 17, 57, 64, 56, 9, 76, 58, 49, 26, 59, 81, 47, 14, 76, 60, 88, 82, 78, 99, 84, 71, 10, 64, 25, 51, 35, 44},
                {10, 82, 82, 51, 18, 25, 82, 91, 89, 34, 76, 63, 29, 68, 63, 85, 61, 91, 75, 24, 51, 92, 87, 48, 33, 17, 77, 76, 59, 23, 82, 50, 19, 29, 76, 31, 97, 78, 28, 66, 82, 28, 24, 47, 17, 12, 50, 70, 9, 58, 91, 93, 11, 56, 72, 31, 55, 51, 67, 10, 9, 79, 50, 55, 83, 37, 0, 35, 10, 63, 68, 98, 95, 59, 61, 16, 83, 29, 32, 43, 30, 63, 9, 40, 46, 12, 65, 3, 60, 28, 83, 66, 84, 2, 75, 47, 54, 68, 60, 5},
                {72, 73, 15, 88, 92, 71, 5, 33, 44, 48, 49, 82, 13, 62, 24, 16, 0, 73, 81, 13, 54, 16, 26, 93, 36, 41, 16, 5, 40, 60, 63, 15, 36, 28, 75, 95, 61, 64, 75, 82, 67, 56, 44, 69, 8, 26, 24, 69, 18, 89, 98, 29, 35, 64, 27, 62, 88, 40, 27, 22, 74, 11, 98, 16, 78, 95, 29, 37, 15, 26, 64, 56, 9, 77, 27, 21, 65, 17, 10, 71, 8, 64, 74, 63, 38, 38, 54, 69, 33, 70, 19, 26, 47, 38, 28, 21, 9, 78, 45, 84},
                {60, 22, 23, 90, 30, 53, 1, 14, 14, 18, 90, 87, 42, 33, 27, 43, 71, 35, 24, 75, 79, 67, 71, 80, 26, 14, 10, 73, 2, 54, 75, 74, 82, 50, 69, 80, 77, 90, 53, 47, 41, 1, 47, 32, 27, 33, 95, 80, 54, 19, 28, 47, 13, 96, 57, 14, 9, 77, 11, 8, 92, 59, 75, 35, 72, 91, 56, 59, 47, 8, 80, 65, 45, 75, 1, 94, 72, 60, 43, 55, 96, 18, 7, 13, 84, 93, 51, 26, 27, 25, 19, 82, 80, 84, 28, 37, 30, 81, 51, 81},
                {20, 24, 91, 48, 90, 86, 88, 89, 72, 17, 72, 80, 28, 96, 0, 17, 83, 77, 14, 41, 65, 77, 99, 8, 30, 34, 24, 26, 68, 32, 35, 45, 20, 53, 56, 28, 1, 43, 65, 18, 76, 20, 12, 31, 25, 2, 47, 24, 47, 81, 46, 75, 25, 20, 66, 5, 54, 28, 89, 3, 70, 13, 71, 0, 50, 32, 40, 13, 88, 98, 12, 68, 44, 70, 24, 7, 29, 30, 5, 29, 68, 28, 19, 91, 41, 76, 89, 97, 47, 55, 45, 92, 21, 94, 16, 3, 42, 32, 87, 42},
                {29, 47, 91, 19, 20, 38, 23, 26, 59, 53, 69, 72, 70, 47, 89, 95, 48, 52, 50, 84, 5, 2, 38, 89, 71, 36, 25, 11, 62, 6, 69, 9, 71, 42, 1, 36, 95, 89, 83, 82, 88, 79, 8, 54, 44, 93, 32, 93, 57, 7, 72, 11, 2, 65, 21, 1, 50, 56, 6, 12, 84, 34, 50, 36, 86, 71, 47, 22, 6, 47, 43, 75, 34, 29, 9, 53, 95, 19, 52, 2, 86, 11, 69, 9, 40, 78, 50, 25, 93, 32, 32, 4, 0, 19, 69, 95, 14, 47, 63, 45},
                {0, 87, 38, 91, 82, 77, 89, 12, 98, 44, 77, 73, 23, 63, 93, 30, 60, 91, 69, 21, 12, 81, 26, 57, 67, 34, 20, 72, 47, 64, 80, 49, 46, 53, 22, 16, 29, 25, 47, 44, 26, 17, 6, 12, 66, 51, 88, 63, 37, 8, 82, 1, 52, 88, 25, 26, 29, 70, 22, 73, 94, 63, 55, 19, 12, 87, 69, 72, 30, 23, 7, 31, 79, 77, 69, 73, 9, 27, 59, 31, 68, 26, 49, 29, 23, 39, 72, 83, 86, 7, 70, 27, 49, 29, 3, 30, 29, 62, 89, 33},
                {49, 53, 89, 96, 29, 77, 72, 29, 14, 18, 2, 78, 65, 32, 18, 96, 79, 24, 55, 33, 9, 47, 29, 22, 42, 76, 81, 14, 50, 12, 72, 59, 46, 81, 71, 95, 79, 36, 4, 32, 63, 62, 72, 40, 15, 99, 93, 95, 14, 85, 63, 7, 59, 91, 72, 62, 28, 66, 80, 52, 55, 1, 87, 68, 14, 21, 78, 4, 29, 7, 50, 5, 91, 10, 85, 46, 63, 91, 25, 58, 58, 80, 63, 65, 0, 57, 97, 78, 71, 33, 17, 35, 79, 76, 22, 6, 15, 99, 20, 16},
                {65, 30, 76, 66, 26, 22, 22, 11, 21, 27, 96, 65, 90, 4, 44, 83, 11, 25, 33, 24, 71, 35, 86, 43, 35, 74, 21, 38, 7, 93, 52, 34, 89, 96, 11, 13, 93, 26, 66, 3, 21, 91, 24, 63, 11, 64, 53, 70, 65, 19, 44, 34, 69, 38, 58, 16, 35, 22, 16, 56, 24, 90, 75, 71, 34, 46, 31, 31, 50, 62, 89, 7, 66, 56, 14, 85, 59, 70, 78, 97, 18, 37, 14, 97, 47, 12, 34, 11, 46, 17, 90, 72, 44, 21, 76, 9, 79, 83, 88, 83},
                {55, 50, 16, 14, 28, 2, 74, 7, 7, 17, 40, 48, 97, 2, 67, 56, 87, 43, 12, 23, 61, 7, 65, 81, 11, 64, 92, 98, 73, 71, 5, 31, 2, 27, 6, 0, 25, 0, 33, 41, 56, 56, 98, 68, 47, 8, 86, 73, 80, 97, 96, 88, 16, 19, 0, 48, 95, 6, 78, 69, 32, 43, 96, 89, 85, 79, 44, 81, 50, 99, 17, 59, 81, 85, 5, 55, 51, 95, 65, 58, 66, 72, 17, 99, 22, 13, 62, 33, 65, 91, 34, 99, 31, 47, 71, 2, 7, 79, 97, 26},
                {54, 50, 86, 64, 54, 79, 64, 48, 34, 32, 90, 28, 41, 30, 55, 99, 96, 54, 68, 64, 78, 38, 1, 23, 35, 94, 4, 26, 37, 23, 5, 14, 95, 74, 30, 53, 59, 58, 63, 28, 36, 91, 31, 30, 57, 90, 15, 92, 10, 97, 47, 12, 53, 61, 54, 61, 8, 61, 93, 49, 69, 19, 9, 17, 6, 38, 56, 50, 72, 30, 87, 57, 9, 11, 50, 74, 15, 28, 8, 82, 19, 35, 21, 87, 5, 35, 21, 37, 13, 39, 24, 54, 57, 23, 25, 43, 51, 19, 56, 87},
                {54, 70, 43, 54, 84, 56, 60, 2, 49, 47, 86, 30, 80, 36, 51, 39, 4, 12, 47, 99, 55, 21, 39, 46, 51, 92, 15, 73, 49, 64, 61, 31, 96, 88, 76, 63, 26, 87, 17, 59, 5, 21, 34, 35, 49, 15, 65, 9, 58, 20, 24, 16, 98, 7, 3, 69, 1, 16, 85, 78, 41, 2, 25, 36, 69, 15, 29, 68, 54, 0, 57, 49, 38, 29, 7, 25, 45, 1, 39, 40, 53, 23, 47, 44, 33, 83, 68, 59, 58, 24, 43, 71, 43, 4, 82, 84, 11, 91, 15, 34},
                {81, 62, 12, 88, 32, 79, 34, 0, 17, 5, 13, 74, 95, 17, 44, 17, 25, 76, 98, 11, 10, 73, 24, 98, 38, 71, 57, 15, 21, 68, 17, 60, 39, 78, 70, 7, 23, 71, 10, 65, 68, 20, 18, 57, 90, 18, 59, 93, 45, 36, 24, 63, 2, 57, 88, 65, 87, 99, 30, 11, 64, 58, 51, 99, 67, 51, 31, 95, 8, 57, 16, 99, 92, 69, 80, 94, 64, 10, 61, 95, 43, 79, 40, 57, 28, 50, 84, 31, 37, 67, 17, 83, 6, 69, 78, 41, 90, 18, 79, 28},
                {41, 81, 59, 46, 95, 37, 73, 5, 48, 77, 86, 99, 61, 66, 41, 42, 54, 14, 67, 17, 82, 27, 42, 30, 61, 45, 97, 68, 52, 82, 21, 54, 12, 3, 55, 87, 93, 11, 31, 17, 38, 23, 25, 98, 23, 5, 78, 57, 15, 99, 50, 18, 95, 96, 85, 13, 55, 31, 52, 71, 41, 16, 47, 64, 48, 35, 33, 53, 15, 48, 36, 96, 22, 68, 78, 90, 78, 67, 9, 88, 39, 55, 11, 26, 39, 46, 74, 35, 46, 37, 84, 27, 72, 75, 71, 16, 49, 85, 64, 4},
                {41, 39, 9, 64, 37, 45, 25, 98, 2, 32, 28, 61, 50, 36, 25, 13, 32, 68, 41, 86, 89, 0, 24, 55, 17, 24, 86, 88, 75, 73, 85, 93, 71, 21, 98, 38, 74, 36, 91, 19, 27, 18, 52, 17, 56, 64, 98, 76, 79, 18, 77, 52, 88, 80, 93, 75, 34, 62, 41, 93, 27, 7, 26, 22, 32, 77, 56, 10, 44, 26, 36, 95, 64, 6, 81, 72, 53, 85, 82, 86, 95, 90, 56, 34, 28, 77, 42, 95, 85, 78, 94, 18, 39, 19, 2, 61, 49, 28, 12, 75},
                {77, 59, 51, 21, 50, 78, 88, 45, 6, 90, 57, 99, 10, 25, 8, 36, 31, 4, 92, 48, 78, 48, 38, 29, 61, 29, 39, 2, 73, 18, 1, 10, 64, 48, 12, 77, 0, 38, 34, 90, 22, 22, 68, 83, 81, 90, 2, 2, 23, 11, 26, 13, 83, 63, 81, 48, 20, 1, 77, 59, 5, 34, 18, 7, 6, 11, 96, 87, 32, 89, 62, 29, 37, 99, 35, 43, 91, 42, 35, 87, 99, 71, 24, 34, 58, 95, 30, 96, 76, 96, 64, 78, 37, 92, 79, 6, 5, 33, 10, 8},
                {31, 16, 19, 55, 79, 84, 32, 66, 34, 28, 25, 68, 55, 89, 51, 71, 35, 53, 27, 5, 89, 96, 53, 26, 40, 37, 79, 19, 2, 91, 70, 95, 8, 46, 85, 23, 80, 97, 82, 12, 55, 53, 73, 33, 75, 31, 34, 9, 80, 69, 35, 50, 75, 90, 12, 96, 11, 53, 36, 65, 6, 91, 61, 5, 33, 32, 11, 11, 80, 45, 10, 90, 33, 40, 19, 82, 83, 11, 98, 27, 79, 18, 5, 57, 22, 27, 20, 83, 86, 55, 84, 5, 80, 11, 30, 4, 67, 66, 51, 85},
                {44, 98, 78, 59, 89, 7, 63, 75, 40, 87, 86, 45, 4, 40, 7, 4, 71, 29, 53, 99, 81, 32, 12, 71, 8, 5, 62, 94, 77, 7, 91, 70, 82, 7, 22, 19, 19, 38, 84, 15, 64, 57, 94, 28, 92, 81, 51, 36, 5, 29, 27, 36, 71, 79, 1, 91, 30, 51, 12, 67, 32, 39, 89, 18, 12, 36, 8, 94, 78, 18, 36, 79, 57, 79, 91, 11, 11, 70, 10, 48, 28, 48, 35, 10, 4, 72, 37, 84, 47, 47, 81, 81, 48, 99, 11, 0, 89, 89, 75, 85},
                {59, 67, 74, 67, 34, 79, 92, 34, 89, 46, 8, 34, 12, 24, 61, 46, 30, 33, 1, 32, 93, 83, 76, 42, 48, 30, 14, 94, 65, 46, 52, 67, 62, 32, 9, 59, 7, 31, 74, 1, 81, 66, 26, 8, 21, 71, 72, 47, 23, 87, 25, 13, 46, 45, 13, 21, 98, 58, 90, 26, 37, 43, 45, 16, 98, 81, 14, 90, 96, 45, 48, 97, 36, 89, 74, 91, 39, 19, 84, 70, 31, 17, 5, 92, 36, 31, 41, 42, 75, 44, 99, 73, 3, 52, 42, 37, 56, 11, 34, 89},
                {37, 4, 70, 25, 78, 52, 52, 31, 59, 14, 70, 57, 12, 5, 4, 40, 97, 28, 67, 10, 86, 50, 13, 78, 61, 25, 14, 37, 44, 38, 47, 24, 35, 59, 61, 5, 62, 50, 22, 16, 8, 42, 81, 42, 76, 19, 12, 35, 13, 79, 51, 12, 57, 0, 55, 7, 86, 82, 73, 32, 85, 25, 10, 11, 13, 8, 56, 98, 9, 13, 87, 29, 57, 41, 61, 77, 3, 96, 35, 27, 70, 10, 2, 40, 20, 89, 91, 26, 66, 39, 52, 54, 44, 33, 67, 98, 22, 82, 32, 35},
                {54, 9, 30, 55, 28, 70, 79, 88, 95, 3, 35, 81, 49, 68, 92, 3, 89, 86, 24, 72, 45, 68, 90, 4, 73, 5, 14, 32, 8, 97, 40, 12, 86, 59, 93, 34, 85, 84, 46, 41, 82, 9, 14, 61, 11, 5, 23, 7, 10, 42, 85, 49, 59, 26, 43, 41, 55, 73, 79, 34, 3, 69, 80, 17, 45, 51, 70, 38, 70, 45, 15, 91, 64, 38, 2, 58, 35, 5, 21, 30, 11, 98, 83, 57, 88, 3, 68, 53, 55, 11, 37, 88, 29, 5, 45, 99, 7, 24, 23, 62},
                {76, 72, 49, 50, 71, 13, 17, 81, 96, 52, 62, 96, 86, 33, 47, 47, 97, 24, 52, 8, 37, 97, 70, 30, 87, 15, 22, 25, 79, 10, 2, 11, 60, 73, 33, 27, 97, 54, 0, 87, 48, 1, 29, 15, 5, 16, 71, 68, 89, 97, 28, 55, 48, 19, 89, 27, 70, 54, 40, 79, 86, 46, 92, 10, 45, 83, 41, 77, 94, 6, 19, 13, 91, 42, 82, 13, 80, 62, 16, 36, 51, 55, 55, 41, 41, 10, 49, 85, 57, 86, 18, 58, 23, 72, 5, 72, 67, 20, 72, 52},
                {67, 65, 30, 18, 47, 58, 26, 77, 5, 28, 58, 95, 17, 68, 98, 75, 28, 57, 51, 2, 60, 67, 5, 48, 71, 79, 45, 20, 62, 51, 67, 97, 60, 42, 80, 8, 74, 25, 40, 44, 26, 57, 85, 84, 71, 94, 96, 63, 92, 89, 24, 55, 79, 65, 76, 4, 62, 28, 92, 24, 78, 76, 97, 71, 29, 30, 59, 81, 82, 71, 81, 44, 23, 26, 97, 33, 3, 79, 85, 55, 30, 61, 22, 23, 66, 8, 15, 99, 95, 14, 42, 70, 8, 27, 95, 62, 33, 52, 34, 3},
                {89, 12, 24, 59, 53, 99, 17, 80, 26, 76, 38, 90, 1, 90, 30, 56, 41, 68, 11, 99, 91, 10, 58, 76, 22, 80, 55, 42, 73, 5, 96, 51, 22, 97, 41, 69, 40, 7, 31, 30, 89, 46, 26, 57, 50, 0, 36, 24, 89, 25, 39, 39, 62, 7, 46, 58, 78, 27, 20, 24, 88, 4, 35, 40, 81, 96, 69, 56, 8, 2, 49, 42, 47, 15, 93, 19, 5, 70, 88, 0, 37, 24, 43, 67, 68, 78, 80, 34, 47, 68, 79, 19, 12, 98, 25, 71, 26, 26, 95, 70},
                {96, 37, 5, 38, 24, 49, 92, 36, 22, 45, 29, 44, 5, 99, 12, 23, 32, 82, 2, 66, 93, 15, 83, 75, 74, 6, 87, 53, 74, 39, 96, 82, 45, 72, 69, 68, 92, 6, 3, 60, 24, 32, 85, 63, 73, 95, 73, 4, 46, 16, 82, 19, 32, 12, 33, 40, 69, 21, 13, 47, 96, 31, 59, 65, 58, 38, 50, 73, 43, 68, 44, 36, 40, 71, 47, 14, 89, 16, 99, 17, 80, 27, 85, 25, 92, 15, 8, 91, 27, 75, 67, 4, 39, 22, 84, 49, 57, 48, 1, 65},
                {14, 86, 82, 51, 17, 11, 30, 97, 45, 6, 97, 86, 48, 96, 15, 92, 98, 44, 68, 39, 33, 78, 57, 43, 81, 17, 68, 96, 0, 17, 80, 99, 23, 23, 22, 9, 12, 64, 24, 24, 70, 58, 28, 92, 54, 23, 8, 95, 64, 35, 86, 52, 18, 73, 67, 47, 37, 54, 39, 38, 83, 54, 12, 76, 96, 9, 42, 10, 21, 53, 3, 87, 6, 70, 75, 94, 16, 15, 48, 31, 72, 77, 9, 11, 27, 54, 69, 45, 4, 30, 99, 85, 27, 34, 93, 69, 52, 79, 81, 83},
                {16, 79, 64, 69, 35, 27, 6, 60, 8, 16, 43, 4, 21, 44, 46, 15, 88, 53, 51, 1, 68, 82, 94, 31, 88, 98, 10, 83, 47, 29, 0, 31, 68, 73, 79, 72, 64, 54, 2, 27, 74, 63, 65, 98, 91, 49, 88, 92, 81, 60, 56, 46, 38, 48, 68, 23, 33, 9, 93, 17, 5, 62, 98, 90, 14, 80, 4, 50, 13, 21, 10, 53, 88, 76, 5, 17, 47, 68, 59, 50, 69, 20, 14, 22, 43, 46, 48, 9, 76, 4, 41, 14, 66, 4, 68, 53, 9, 56, 7, 27},
                {35, 74, 63, 12, 96, 42, 89, 88, 95, 18, 44, 14, 33, 3, 15, 19, 6, 66, 38, 70, 14, 2, 73, 89, 83, 90, 85, 27, 38, 27, 24, 1, 4, 91, 28, 28, 86, 86, 55, 40, 93, 53, 86, 91, 4, 93, 76, 58, 47, 54, 51, 33, 98, 96, 2, 55, 63, 96, 1, 36, 61, 92, 11, 26, 14, 86, 77, 51, 32, 19, 5, 53, 35, 83, 86, 45, 23, 69, 6, 35, 38, 92, 42, 6, 38, 10, 49, 56, 22, 18, 21, 4, 41, 85, 63, 51, 79, 77, 83, 75},
                {7, 81, 1, 11, 23, 34, 55, 1, 26, 52, 63, 1, 96, 10, 3, 82, 99, 91, 60, 3, 88, 12, 13, 12, 91, 98, 38, 80, 1, 14, 25, 39, 22, 10, 48, 97, 4, 3, 21, 22, 68, 5, 12, 61, 87, 22, 67, 4, 32, 63, 76, 18, 1, 82, 87, 67, 91, 92, 26, 85, 91, 51, 92, 88, 95, 63, 70, 88, 59, 59, 85, 48, 66, 21, 13, 7, 69, 26, 77, 12, 90, 63, 1, 95, 81, 68, 85, 21, 4, 91, 93, 33, 98, 50, 75, 44, 39, 59, 15, 25},
                {74, 48, 90, 75, 88, 19, 29, 55, 72, 21, 50, 14, 37, 47, 67, 95, 28, 34, 31, 95, 99, 90, 21, 30, 0, 22, 70, 5, 74, 8, 3, 5, 59, 96, 41, 88, 57, 92, 98, 85, 90, 58, 33, 3, 80, 66, 18, 25, 91, 12, 63, 44, 92, 70, 7, 30, 6, 26, 22, 3, 67, 42, 70, 47, 96, 38, 21, 78, 46, 3, 23, 32, 14, 99, 79, 14, 12, 28, 66, 99, 29, 2, 72, 84, 2, 62, 27, 41, 61, 52, 58, 64, 47, 14, 88, 49, 43, 37, 26, 21},
                {55, 77, 95, 29, 49, 3, 23, 63, 65, 19, 30, 19, 34, 60, 3, 67, 46, 18, 89, 73, 56, 75, 47, 22, 85, 39, 80, 8, 11, 11, 89, 46, 55, 10, 72, 36, 49, 77, 77, 58, 18, 52, 96, 10, 94, 50, 38, 6, 8, 44, 73, 12, 15, 99, 12, 0, 14, 78, 28, 24, 44, 67, 22, 52, 83, 9, 88, 41, 80, 7, 34, 88, 84, 97, 54, 60, 81, 92, 77, 44, 35, 17, 87, 87, 70, 32, 37, 99, 62, 47, 2, 81, 31, 4, 43, 15, 95, 86, 12, 92},
                {44, 48, 25, 52, 43, 34, 18, 64, 55, 19, 51, 97, 96, 92, 75, 34, 9, 45, 43, 73, 57, 21, 55, 11, 58, 92, 90, 63, 70, 78, 65, 40, 83, 96, 51, 94, 42, 6, 50, 40, 13, 17, 96, 65, 99, 18, 48, 29, 21, 20, 65, 96, 18, 72, 32, 5, 63, 90, 95, 17, 85, 29, 57, 30, 92, 11, 10, 91, 10, 38, 43, 14, 54, 51, 37, 77, 95, 62, 40, 80, 65, 16, 88, 15, 10, 41, 27, 64, 13, 98, 5, 8, 67, 42, 89, 46, 72, 93, 45, 50},
                {87, 90, 53, 67, 74, 45, 49, 16, 37, 82, 61, 86, 80, 81, 75, 95, 88, 40, 29, 4, 79, 23, 20, 72, 86, 49, 45, 88, 89, 98, 90, 95, 92, 57, 20, 83, 41, 20, 32, 99, 60, 2, 73, 48, 68, 91, 31, 15, 85, 60, 62, 84, 56, 95, 73, 5, 68, 0, 24, 31, 9, 86, 97, 82, 2, 75, 8, 93, 91, 74, 47, 64, 82, 15, 46, 14, 80, 30, 95, 39, 17, 42, 90, 10, 13, 13, 19, 52, 97, 56, 68, 48, 6, 41, 2, 80, 77, 85, 77, 51},
                {20, 21, 26, 17, 21, 56, 9, 11, 13, 38, 87, 91, 19, 53, 0, 96, 91, 97, 30, 8, 42, 23, 84, 67, 42, 15, 66, 44, 64, 66, 27, 35, 69, 31, 87, 37, 25, 6, 66, 9, 57, 59, 52, 8, 49, 78, 34, 55, 91, 47, 95, 98, 23, 85, 71, 56, 8, 32, 13, 67, 60, 95, 73, 89, 76, 22, 37, 49, 35, 89, 5, 38, 18, 57, 5, 5, 64, 24, 35, 95, 92, 95, 58, 24, 40, 5, 27, 59, 56, 16, 42, 39, 64, 52, 85, 35, 75, 48, 17, 44},
                {47, 28, 42, 71, 78, 81, 58, 98, 35, 84, 14, 59, 21, 77, 89, 44, 56, 8, 58, 47, 30, 99, 45, 70, 90, 96, 73, 24, 41, 91, 81, 66, 13, 55, 33, 20, 43, 89, 76, 55, 20, 5, 32, 1, 12, 13, 35, 57, 44, 14, 33, 61, 91, 89, 79, 55, 80, 36, 70, 11, 54, 17, 80, 67, 32, 31, 37, 92, 60, 90, 90, 57, 11, 84, 30, 7, 93, 71, 85, 76, 67, 49, 28, 41, 33, 55, 55, 94, 38, 55, 25, 33, 94, 64, 23, 44, 45, 56, 48, 12},
                {85, 28, 9, 75, 86, 56, 38, 21, 26, 11, 85, 7, 98, 68, 23, 35, 62, 51, 33, 24, 25, 17, 40, 81, 6, 94, 53, 72, 15, 53, 9, 57, 79, 39, 12, 6, 79, 10, 49, 9, 85, 85, 18, 20, 9, 5, 90, 30, 1, 90, 38, 92, 13, 48, 56, 45, 8, 45, 23, 63, 51, 87, 67, 92, 72, 8, 68, 40, 35, 46, 35, 50, 68, 6, 17, 79, 44, 20, 65, 52, 54, 48, 17, 38, 6, 85, 1, 99, 58, 84, 16, 13, 25, 61, 55, 48, 98, 29, 28, 35},
                {93, 19, 8, 99, 1, 76, 5, 34, 30, 42, 36, 3, 17, 94, 75, 31, 59, 58, 75, 60, 19, 58, 8, 39, 33, 0, 54, 23, 68, 43, 20, 46, 78, 69, 64, 85, 39, 96, 75, 63, 60, 51, 11, 11, 23, 74, 59, 14, 85, 35, 97, 44, 27, 61, 16, 76, 6, 95, 94, 79, 18, 59, 17, 50, 85, 37, 10, 32, 46, 6, 30, 13, 9, 98, 77, 18, 50, 82, 13, 83, 43, 0, 97, 71, 10, 20, 91, 52, 48, 51, 76, 82, 8, 43, 50, 46, 20, 59, 52, 7},
                {26, 27, 18, 21, 82, 79, 76, 78, 8, 0, 34, 98, 66, 39, 10, 40, 65, 83, 6, 52, 37, 91, 40, 16, 78, 29, 32, 62, 77, 10, 41, 87, 84, 85, 92, 58, 43, 40, 42, 44, 92, 89, 93, 16, 26, 35, 67, 9, 86, 54, 32, 99, 43, 72, 57, 55, 24, 15, 26, 94, 44, 27, 76, 85, 34, 77, 95, 40, 23, 82, 16, 72, 10, 34, 59, 8, 82, 30, 10, 20, 91, 85, 97, 53, 75, 90, 53, 93, 71, 31, 0, 34, 15, 13, 94, 54, 46, 80, 76, 67},
                {55, 99, 35, 58, 22, 70, 51, 50, 32, 76, 61, 89, 47, 3, 62, 2, 88, 96, 19, 43, 6, 11, 47, 7, 44, 92, 48, 9, 79, 40, 90, 83, 3, 27, 69, 82, 76, 68, 30, 99, 61, 50, 97, 10, 18, 74, 6, 79, 51, 86, 46, 1, 25, 73, 86, 64, 67, 82, 68, 65, 9, 59, 69, 57, 54, 9, 15, 59, 77, 62, 67, 85, 88, 88, 82, 41, 36, 73, 34, 27, 0, 13, 8, 19, 96, 63, 34, 50, 41, 64, 11, 41, 96, 59, 78, 32, 57, 26, 9, 26},
                {64, 58, 54, 46, 83, 61, 80, 80, 57, 44, 93, 86, 42, 73, 3, 84, 99, 39, 86, 96, 78, 93, 61, 94, 85, 10, 5, 5, 24, 57, 22, 47, 80, 18, 0, 30, 74, 97, 95, 12, 34, 95, 15, 73, 98, 1, 53, 22, 74, 92, 94, 54, 78, 83, 54, 60, 6, 14, 56, 66, 34, 35, 60, 93, 39, 5, 64, 27, 63, 65, 79, 48, 25, 94, 81, 87, 84, 57, 64, 55, 82, 45, 99, 76, 0, 26, 94, 70, 61, 9, 13, 77, 52, 96, 38, 58, 40, 98, 6, 95},
                {32, 81, 88, 87, 84, 70, 19, 16, 95, 27, 77, 84, 50, 80, 96, 30, 17, 75, 68, 86, 49, 85, 52, 58, 82, 75, 31, 36, 68, 47, 11, 30, 50, 44, 81, 60, 62, 17, 67, 52, 76, 24, 64, 8, 65, 64, 58, 57, 68, 17, 86, 2, 26, 20, 36, 99, 99, 28, 37, 76, 9, 67, 3, 6, 44, 99, 80, 12, 59, 96, 15, 72, 39, 94, 73, 44, 89, 41, 56, 24, 63, 81, 10, 63, 76, 73, 93, 98, 72, 72, 58, 74, 93, 30, 76, 9, 79, 57, 75, 59},
                {75, 95, 27, 23, 67, 37, 99, 73, 18, 66, 26, 60, 95, 39, 90, 12, 39, 87, 40, 66, 53, 90, 11, 25, 50, 64, 0, 74, 63, 7, 76, 32, 19, 34, 34, 69, 69, 12, 96, 65, 2, 25, 33, 91, 35, 78, 60, 95, 12, 28, 48, 8, 5, 3, 53, 19, 46, 72, 19, 73, 39, 92, 81, 97, 21, 70, 84, 94, 81, 24, 47, 32, 86, 73, 88, 7, 93, 34, 53, 94, 13, 7, 73, 26, 61, 11, 14, 22, 76, 80, 8, 23, 20, 13, 27, 8, 43, 69, 66, 27},
                {90, 84, 59, 8, 47, 74, 48, 84, 10, 80, 21, 14, 64, 48, 48, 90, 13, 49, 75, 51, 5, 47, 15, 19, 53, 1, 6, 38, 36, 4, 99, 3, 29, 5, 90, 75, 40, 60, 40, 68, 77, 28, 28, 67, 76, 95, 4, 31, 76, 18, 43, 93, 91, 49, 81, 45, 80, 17, 22, 59, 68, 88, 79, 11, 45, 87, 54, 26, 21, 31, 1, 97, 71, 45, 54, 37, 13, 91, 26, 18, 43, 69, 60, 74, 23, 86, 97, 29, 75, 77, 3, 26, 39, 23, 15, 81, 20, 97, 16, 21},
                {98, 87, 46, 58, 16, 80, 51, 51, 72, 86, 85, 86, 9, 71, 69, 88, 94, 50, 0, 48, 22, 43, 69, 12, 45, 82, 46, 91, 23, 35, 21, 20, 67, 84, 59, 35, 24, 44, 43, 98, 3, 87, 54, 55, 36, 83, 14, 60, 71, 33, 49, 45, 39, 2, 92, 73, 23, 18, 17, 76, 81, 70, 83, 6, 48, 38, 5, 61, 62, 14, 38, 62, 40, 78, 36, 17, 90, 49, 94, 86, 62, 75, 48, 88, 71, 0, 63, 81, 4, 41, 35, 57, 8, 54, 91, 4, 26, 1, 11, 31},
                {78, 37, 15, 99, 45, 23, 99, 81, 71, 19, 59, 33, 83, 69, 30, 42, 85, 61, 8, 56, 7, 93, 13, 73, 57, 30, 72, 30, 52, 69, 29, 5, 26, 6, 72, 53, 60, 2, 20, 62, 4, 11, 95, 31, 70, 53, 62, 90, 99, 91, 49, 17, 74, 24, 70, 64, 48, 46, 92, 84, 14, 87, 68, 36, 36, 80, 75, 11, 92, 43, 54, 24, 85, 21, 11, 86, 28, 96, 45, 12, 86, 67, 40, 74, 44, 8, 54, 38, 0, 91, 90, 65, 92, 69, 40, 10, 89, 36, 89, 26},
                {41, 38, 5, 55, 82, 42, 71, 63, 43, 42, 86, 4, 86, 99, 7, 85, 94, 39, 82, 20, 41, 97, 49, 51, 6, 60, 99, 66, 88, 69, 7, 42, 68, 52, 2, 64, 38, 25, 7, 41, 77, 31, 82, 23, 86, 83, 99, 18, 82, 47, 93, 29, 89, 43, 99, 88, 88, 84, 75, 93, 34, 52, 47, 63, 43, 23, 21, 42, 98, 3, 3, 66, 65, 36, 99, 8, 99, 30, 36, 79, 42, 39, 60, 5, 82, 74, 30, 89, 91, 22, 12, 61, 39, 17, 70, 16, 56, 88, 24, 49},
                {5, 84, 91, 96, 55, 23, 76, 31, 68, 85, 94, 14, 68, 26, 90, 0, 5, 1, 80, 49, 33, 64, 49, 80, 50, 91, 56, 6, 94, 23, 90, 38, 96, 55, 27, 96, 47, 77, 38, 29, 22, 55, 73, 20, 70, 70, 67, 31, 61, 45, 63, 82, 24, 59, 2, 65, 76, 38, 84, 73, 69, 0, 4, 68, 67, 68, 26, 50, 30, 15, 11, 57, 9, 65, 17, 57, 75, 54, 36, 85, 19, 33, 8, 94, 79, 48, 40, 37, 41, 75, 0, 69, 85, 40, 56, 23, 13, 68, 22, 46},
                {10, 87, 7, 27, 65, 90, 97, 61, 72, 42, 68, 90, 91, 10, 7, 2, 6, 1, 14, 10, 68, 34, 11, 69, 2, 5, 42, 83, 23, 23, 54, 35, 37, 34, 57, 23, 73, 55, 39, 27, 27, 50, 40, 43, 97, 95, 24, 94, 98, 88, 81, 23, 38, 54, 88, 35, 69, 88, 48, 25, 21, 84, 5, 30, 82, 49, 73, 94, 62, 67, 81, 41, 29, 57, 79, 95, 88, 97, 3, 1, 73, 31, 72, 60, 58, 60, 93, 49, 24, 82, 89, 92, 71, 96, 32, 55, 49, 94, 0, 67},
                {91, 11, 29, 61, 63, 37, 21, 6, 4, 84, 40, 0, 93, 24, 63, 78, 38, 75, 40, 36, 17, 81, 34, 84, 32, 94, 95, 98, 2, 71, 97, 6, 61, 27, 61, 71, 60, 9, 99, 88, 19, 10, 6, 8, 80, 21, 51, 84, 88, 84, 70, 72, 75, 98, 97, 30, 28, 58, 23, 58, 69, 39, 4, 35, 28, 10, 26, 33, 76, 85, 24, 94, 91, 46, 39, 2, 36, 12, 7, 6, 4, 6, 75, 44, 6, 42, 94, 17, 65, 82, 34, 45, 51, 1, 6, 47, 47, 76, 8, 81},
                {43, 25, 61, 67, 49, 6, 25, 1, 32, 79, 96, 12, 67, 82, 4, 57, 58, 47, 20, 1, 49, 63, 92, 37, 31, 31, 18, 81, 47, 14, 27, 4, 5, 25, 41, 51, 24, 51, 54, 4, 4, 36, 89, 47, 21, 23, 63, 19, 92, 51, 71, 46, 24, 20, 71, 26, 72, 95, 57, 94, 56, 0, 47, 6, 83, 89, 72, 67, 21, 68, 20, 90, 97, 2, 18, 90, 22, 70, 48, 94, 22, 36, 31, 17, 12, 51, 38, 26, 16, 23, 10, 92, 41, 89, 36, 35, 52, 69, 91, 30},
                {92, 81, 88, 0, 33, 8, 36, 73, 13, 14, 37, 70, 22, 44, 6, 57, 91, 92, 17, 64, 74, 70, 74, 61, 19, 42, 30, 15, 15, 81, 93, 56, 88, 51, 66, 50, 86, 92, 74, 17, 87, 20, 69, 54, 39, 98, 61, 38, 61, 12, 11, 43, 23, 20, 48, 48, 70, 46, 29, 45, 42, 53, 23, 45, 70, 34, 74, 35, 95, 9, 85, 37, 87, 35, 79, 79, 89, 33, 66, 85, 80, 58, 50, 84, 37, 48, 36, 54, 6, 97, 28, 82, 48, 50, 52, 2, 2, 41, 88, 81},
                {68, 95, 4, 9, 83, 76, 25, 77, 96, 59, 40, 53, 86, 83, 8, 90, 18, 68, 11, 78, 74, 77, 69, 58, 78, 74, 29, 46, 91, 21, 72, 10, 65, 57, 91, 53, 69, 51, 61, 88, 64, 71, 56, 6, 3, 15, 38, 39, 32, 27, 48, 0, 46, 67, 54, 80, 90, 86, 0, 41, 22, 17, 86, 75, 66, 37, 27, 78, 33, 83, 13, 11, 2, 28, 1, 88, 17, 33, 28, 37, 77, 45, 0, 44, 91, 30, 60, 98, 9, 14, 4, 83, 34, 58, 89, 51, 72, 26, 16, 11},
                {64, 52, 35, 52, 76, 0, 71, 48, 98, 73, 31, 25, 8, 58, 50, 19, 89, 19, 11, 30, 12, 79, 58, 57, 89, 83, 51, 92, 89, 88, 12, 60, 10, 87, 92, 17, 60, 30, 3, 53, 34, 28, 45, 87, 2, 86, 62, 79, 32, 17, 83, 89, 22, 3, 45, 18, 33, 89, 70, 0, 3, 95, 21, 81, 86, 28, 60, 47, 21, 2, 81, 51, 22, 94, 98, 35, 81, 33, 61, 31, 11, 78, 36, 18, 59, 47, 82, 39, 2, 16, 16, 56, 69, 19, 35, 71, 38, 90, 79, 45},
                {47, 28, 15, 38, 50, 2, 72, 84, 54, 83, 38, 40, 83, 14, 66, 87, 39, 64, 39, 6, 29, 46, 39, 64, 15, 28, 65, 13, 87, 62, 81, 49, 14, 8, 59, 15, 10, 5, 6, 40, 98, 92, 10, 56, 40, 50, 89, 30, 83, 36, 95, 81, 70, 14, 40, 56, 2, 98, 79, 12, 52, 23, 14, 5, 3, 33, 53, 85, 85, 38, 71, 17, 36, 88, 52, 70, 97, 45, 53, 60, 13, 48, 31, 23, 57, 54, 51, 19, 24, 17, 30, 58, 47, 18, 9, 66, 80, 29, 96, 21},
                {28, 90, 69, 71, 8, 87, 68, 42, 91, 44, 61, 77, 71, 17, 26, 13, 13, 18, 48, 14, 62, 21, 33, 49, 85, 66, 24, 63, 99, 91, 44, 1, 14, 60, 94, 84, 46, 45, 43, 25, 30, 3, 43, 33, 72, 13, 85, 98, 79, 51, 19, 89, 89, 18, 96, 92, 89, 28, 85, 42, 71, 95, 46, 15, 21, 49, 8, 38, 34, 62, 40, 89, 73, 29, 37, 59, 72, 6, 15, 82, 30, 97, 28, 68, 36, 81, 96, 48, 96, 7, 66, 9, 92, 78, 93, 54, 90, 4, 5, 90},
                {89, 70, 76, 13, 5, 63, 49, 44, 83, 35, 84, 45, 84, 39, 46, 82, 23, 32, 41, 68, 6, 88, 41, 17, 86, 58, 70, 51, 84, 54, 78, 16, 89, 38, 30, 6, 89, 64, 89, 28, 37, 99, 81, 96, 42, 30, 43, 53, 90, 68, 5, 20, 86, 46, 11, 54, 17, 56, 12, 20, 53, 79, 15, 72, 12, 44, 42, 2, 66, 28, 42, 31, 66, 44, 13, 70, 3, 21, 69, 35, 54, 9, 86, 8, 81, 22, 76, 4, 70, 96, 7, 43, 38, 33, 0, 98, 13, 21, 1, 56},
                {76, 41, 56, 17, 19, 52, 44, 91, 77, 69, 66, 21, 89, 76, 76, 33, 3, 4, 24, 78, 28, 46, 20, 0, 18, 3, 13, 21, 88, 25, 6, 28, 83, 20, 47, 93, 39, 29, 79, 87, 37, 69, 64, 22, 13, 59, 22, 86, 95, 15, 99, 70, 46, 54, 94, 45, 75, 7, 14, 62, 53, 69, 74, 38, 74, 84, 7, 24, 42, 50, 78, 43, 78, 10, 60, 92, 37, 71, 92, 95, 74, 19, 13, 66, 2, 64, 94, 88, 34, 97, 78, 45, 61, 27, 24, 19, 10, 86, 12, 54},
                {52, 47, 80, 6, 93, 91, 22, 33, 17, 29, 35, 96, 32, 89, 82, 94, 52, 77, 7, 68, 54, 90, 27, 45, 2, 64, 56, 66, 38, 25, 13, 75, 29, 63, 1, 16, 78, 17, 86, 46, 69, 63, 78, 74, 40, 81, 25, 16, 62, 55, 93, 70, 81, 2, 47, 56, 74, 41, 63, 0, 79, 31, 16, 18, 61, 92, 37, 2, 36, 27, 76, 11, 85, 31, 50, 52, 47, 70, 24, 22, 41, 7, 5, 41, 36, 64, 12, 32, 80, 64, 16, 67, 1, 24, 72, 80, 97, 81, 1, 51},
                {77, 62, 64, 59, 25, 75, 14, 14, 21, 97, 93, 9, 6, 14, 86, 61, 94, 93, 88, 58, 84, 43, 4, 25, 88, 97, 88, 85, 39, 82, 49, 39, 2, 93, 2, 40, 46, 13, 38, 37, 57, 33, 78, 1, 40, 2, 5, 50, 84, 92, 8, 1, 6, 40, 42, 86, 87, 17, 49, 17, 97, 55, 12, 74, 42, 97, 46, 8, 7, 15, 27, 84, 16, 99, 45, 34, 47, 97, 53, 28, 62, 58, 0, 67, 62, 1, 83, 4, 50, 61, 67, 92, 70, 68, 46, 81, 27, 46, 15, 64},
                {72, 47, 32, 75, 77, 94, 99, 51, 31, 65, 98, 72, 87, 66, 56, 2, 13, 5, 86, 1, 59, 65, 47, 65, 50, 5, 4, 27, 57, 51, 15, 31, 33, 75, 90, 58, 38, 91, 68, 86, 32, 56, 33, 65, 8, 57, 60, 15, 86, 39, 7, 32, 76, 0, 3, 5, 82, 26, 65, 64, 74, 52, 8, 11, 74, 25, 12, 62, 44, 37, 36, 33, 34, 76, 41, 0, 37, 62, 80, 18, 24, 85, 95, 73, 62, 70, 11, 68, 56, 79, 37, 89, 52, 74, 71, 26, 15, 92, 30, 50},
                {54, 29, 55, 72, 94, 43, 99, 75, 61, 22, 96, 47, 5, 86, 89, 13, 92, 0, 93, 82, 74, 0, 81, 45, 55, 29, 17, 21, 49, 23, 85, 54, 22, 74, 5, 93, 14, 99, 6, 88, 69, 48, 80, 9, 16, 17, 37, 79, 39, 10, 16, 38, 99, 41, 32, 92, 77, 76, 12, 72, 95, 4, 8, 11, 41, 89, 90, 82, 0, 50, 90, 27, 77, 29, 11, 1, 74, 8, 76, 83, 35, 11, 64, 38, 74, 74, 63, 46, 24, 44, 25, 2, 56, 86, 60, 28, 95, 97, 65, 1},
                {83, 94, 44, 6, 16, 69, 47, 63, 53, 94, 62, 70, 55, 28, 56, 92, 90, 63, 93, 12, 48, 36, 0, 41, 42, 97, 52, 45, 43, 83, 64, 12, 35, 97, 99, 59, 19, 35, 30, 35, 87, 27, 13, 10, 64, 32, 22, 85, 36, 28, 26, 85, 67, 73, 68, 39, 93, 96, 44, 90, 14, 19, 57, 31, 33, 98, 12, 61, 74, 27, 93, 17, 82, 82, 32, 49, 30, 28, 8, 36, 37, 22, 99, 5, 15, 10, 47, 17, 67, 37, 53, 24, 51, 40, 45, 60, 7, 9, 94, 69},
                {64, 66, 4, 28, 28, 93, 48, 71, 80, 23, 11, 79, 22, 95, 55, 36, 28, 80, 8, 59, 33, 91, 43, 18, 99, 94, 9, 13, 75, 5, 10, 81, 34, 92, 23, 69, 48, 55, 75, 46, 43, 6, 92, 76, 33, 24, 15, 35, 15, 74, 30, 24, 88, 82, 32, 36, 98, 95, 63, 39, 76, 4, 71, 35, 51, 88, 74, 24, 43, 60, 68, 52, 91, 76, 53, 72, 24, 34, 90, 89, 72, 49, 55, 25, 43, 18, 86, 95, 19, 36, 0, 94, 86, 77, 29, 6, 73, 14, 45, 77},
                {95, 28, 44, 24, 43, 14, 7, 22, 26, 83, 97, 23, 63, 12, 41, 66, 26, 47, 65, 78, 8, 11, 56, 90, 77, 60, 41, 35, 70, 68, 4, 71, 53, 91, 26, 91, 76, 56, 58, 44, 35, 24, 31, 91, 47, 88, 29, 39, 85, 57, 0, 69, 70, 68, 39, 14, 17, 1, 18, 93, 58, 51, 27, 59, 26, 65, 27, 75, 70, 65, 73, 24, 44, 10, 80, 55, 1, 69, 19, 88, 48, 40, 59, 12, 12, 86, 24, 59, 62, 84, 36, 40, 30, 13, 17, 81, 61, 66, 10, 42},
                {76, 97, 58, 27, 27, 51, 85, 10, 49, 34, 51, 88, 7, 16, 7, 68, 24, 6, 5, 89, 77, 69, 8, 88, 58, 6, 16, 5, 26, 38, 95, 52, 95, 25, 40, 61, 42, 73, 69, 61, 98, 67, 93, 80, 35, 5, 15, 0, 23, 87, 65, 48, 17, 92, 50, 54, 74, 61, 58, 51, 37, 53, 43, 11, 18, 5, 38, 58, 4, 78, 48, 79, 69, 81, 77, 76, 35, 71, 19, 28, 84, 98, 3, 15, 70, 21, 52, 61, 33, 83, 81, 50, 34, 20, 85, 93, 22, 40, 50, 93},
                {45, 8, 35, 92, 21, 96, 23, 68, 91, 71, 80, 32, 28, 50, 40, 64, 24, 52, 64, 93, 72, 0, 7, 47, 94, 89, 70, 85, 95, 42, 82, 83, 5, 61, 86, 16, 99, 23, 71, 12, 71, 91, 30, 45, 59, 16, 21, 85, 87, 37, 70, 42, 18, 50, 5, 70, 51, 53, 17, 72, 97, 4, 75, 72, 84, 55, 40, 16, 19, 99, 24, 3, 95, 28, 27, 30, 44, 32, 40, 95, 39, 52, 33, 97, 60, 72, 55, 91, 59, 84, 39, 40, 59, 54, 45, 36, 39, 44, 37, 99},
                {37, 39, 52, 98, 15, 46, 9, 67, 0, 80, 18, 49, 77, 61, 21, 37, 26, 68, 49, 29, 45, 74, 10, 59, 78, 63, 60, 31, 44, 94, 5, 41, 68, 27, 89, 13, 92, 62, 36, 5, 27, 31, 75, 33, 95, 8, 71, 74, 64, 26, 3, 25, 65, 72, 13, 53, 25, 68, 24, 64, 1, 0, 61, 62, 9, 21, 57, 55, 48, 66, 87, 23, 40, 79, 11, 17, 67, 17, 70, 37, 73, 27, 29, 91, 11, 64, 21, 36, 30, 60, 69, 8, 89, 6, 69, 71, 79, 10, 26, 18},
                {57, 35, 98, 81, 52, 68, 62, 26, 52, 57, 19, 97, 54, 99, 58, 83, 0, 44, 76, 82, 46, 8, 39, 31, 88, 91, 27, 95, 75, 33, 5, 28, 18, 22, 18, 96, 7, 55, 71, 44, 6, 62, 81, 58, 50, 5, 92, 53, 22, 38, 34, 30, 20, 99, 22, 69, 34, 33, 22, 2, 65, 88, 62, 66, 63, 9, 74, 86, 56, 88, 52, 22, 18, 93, 0, 76, 2, 33, 61, 68, 75, 71, 66, 53, 82, 10, 45, 21, 95, 99, 87, 9, 64, 59, 33, 88, 0, 45, 35, 21},
                {92, 62, 0, 58, 58, 75, 65, 84, 14, 25, 75, 21, 10, 76, 72, 17, 81, 37, 58, 48, 36, 65, 36, 15, 21, 99, 54, 21, 78, 99, 68, 49, 35, 58, 78, 50, 80, 86, 71, 17, 5, 94, 60, 96, 99, 55, 61, 12, 56, 66, 31, 66, 96, 59, 73, 68, 40, 99, 88, 67, 59, 57, 49, 84, 92, 23, 51, 71, 66, 27, 99, 19, 96, 90, 5, 77, 78, 34, 72, 17, 84, 60, 37, 55, 2, 81, 40, 32, 33, 40, 69, 16, 1, 13, 67, 8, 64, 90, 12, 96},
                {50, 91, 44, 27, 71, 5, 46, 64, 63, 95, 33, 37, 97, 65, 5, 75, 68, 2, 16, 28, 87, 30, 92, 29, 87, 6, 21, 44, 94, 14, 23, 23, 35, 56, 42, 60, 69, 18, 35, 84, 75, 0, 9, 27, 78, 49, 1, 37, 54, 96, 6, 51, 10, 88, 20, 73, 81, 43, 36, 37, 72, 24, 37, 90, 66, 36, 10, 50, 67, 42, 20, 6, 53, 48, 16, 75, 21, 5, 30, 82, 6, 26, 60, 89, 84, 74, 50, 38, 83, 54, 39, 13, 40, 39, 62, 30, 61, 57, 31, 77},
                {73, 44, 17, 58, 24, 86, 52, 97, 87, 89, 28, 2, 45, 89, 10, 67, 83, 17, 71, 82, 90, 21, 82, 34, 34, 76, 42, 23, 18, 25, 54, 46, 79, 41, 6, 35, 6, 20, 75, 70, 99, 16, 66, 53, 8, 59, 55, 72, 19, 1, 45, 38, 72, 6, 62, 96, 99, 94, 20, 96, 83, 86, 82, 12, 8, 41, 58, 67, 22, 57, 61, 29, 23, 51, 82, 74, 74, 25, 43, 24, 62, 57, 45, 38, 59, 44, 82, 65, 23, 82, 46, 59, 26, 78, 84, 47, 32, 26, 23, 84},
                {93, 12, 1, 70, 15, 97, 43, 63, 23, 99, 43, 71, 46, 10, 79, 18, 18, 31, 75, 99, 50, 71, 51, 90, 50, 16, 94, 24, 36, 87, 31, 27, 41, 39, 23, 85, 57, 83, 88, 70, 67, 49, 46, 26, 95, 87, 55, 49, 21, 42, 12, 77, 71, 38, 34, 66, 35, 67, 27, 66, 36, 34, 84, 16, 44, 81, 16, 39, 59, 8, 31, 75, 62, 67, 80, 80, 11, 57, 73, 52, 92, 39, 9, 96, 27, 43, 29, 79, 90, 73, 84, 25, 56, 15, 92, 62, 56, 86, 71, 55},
                {65, 16, 54, 48, 0, 49, 42, 13, 75, 11, 92, 55, 83, 37, 47, 78, 1, 13, 6, 60, 69, 97, 83, 25, 67, 67, 52, 39, 19, 54, 29, 41, 45, 89, 23, 39, 66, 16, 99, 17, 90, 62, 98, 38, 87, 44, 18, 5, 78, 92, 18, 78, 2, 23, 72, 95, 70, 62, 76, 89, 76, 49, 89, 42, 17, 77, 76, 54, 87, 6, 0, 37, 2, 33, 30, 56, 90, 40, 80, 12, 22, 2, 77, 61, 51, 38, 6, 94, 93, 47, 4, 97, 64, 75, 23, 21, 5, 76, 42, 51},
                {51, 96, 56, 60, 92, 65, 55, 74, 50, 73, 19, 40, 41, 16, 79, 21, 58, 12, 81, 90, 39, 31, 84, 98, 33, 32, 64, 62, 95, 15, 81, 86, 6, 91, 92, 67, 24, 9, 26, 52, 14, 19, 87, 68, 18, 36, 12, 66, 38, 52, 70, 35, 89, 93, 60, 6, 80, 92, 87, 62, 17, 85, 1, 21, 84, 53, 63, 4, 73, 6, 16, 62, 18, 86, 59, 4, 69, 94, 52, 71, 60, 54, 52, 86, 23, 70, 0, 11, 2, 83, 17, 43, 19, 7, 9, 78, 9, 47, 77, 93},
                {24, 88, 71, 48, 58, 38, 23, 36, 24, 97, 47, 69, 62, 50, 72, 22, 24, 93, 75, 14, 26, 17, 77, 95, 70, 69, 75, 62, 70, 18, 59, 29, 12, 6, 84, 65, 83, 19, 24, 17, 33, 54, 45, 68, 18, 84, 16, 60, 9, 62, 15, 87, 64, 14, 71, 54, 74, 42, 82, 33, 41, 96, 44, 5, 31, 44, 3, 18, 11, 93, 9, 86, 1, 48, 49, 68, 82, 80, 87, 66, 5, 67, 94, 81, 64, 58, 64, 86, 83, 14, 45, 35, 52, 23, 80, 28, 99, 71, 64, 79},
                {44, 80, 14, 91, 83, 72, 33, 25, 88, 6, 87, 14, 85, 86, 62, 6, 34, 77, 15, 85, 76, 2, 62, 83, 66, 9, 60, 22, 44, 51, 22, 44, 69, 20, 4, 44, 24, 33, 59, 58, 67, 18, 92, 47, 49, 7, 73, 92, 71, 39, 85, 62, 22, 30, 87, 54, 59, 20, 96, 47, 27, 99, 43, 77, 14, 18, 51, 22, 8, 64, 80, 92, 76, 0, 58, 22, 81, 59, 60, 56, 21, 12, 97, 42, 16, 37, 85, 44, 51, 83, 42, 88, 4, 19, 6, 97, 31, 20, 25, 4},
                {38, 85, 85, 59, 9, 36, 42, 21, 92, 61, 51, 69, 18, 9, 11, 71, 64, 64, 96, 65, 91, 25, 0, 36, 27, 13, 94, 45, 73, 87, 73, 51, 35, 51, 16, 79, 91, 30, 68, 39, 27, 42, 82, 29, 25, 88, 52, 59, 0, 2, 57, 61, 85, 32, 30, 91, 51, 66, 29, 97, 38, 31, 36, 29, 71, 86, 58, 91, 31, 10, 62, 81, 81, 70, 49, 22, 14, 90, 11, 45, 36, 20, 57, 75, 47, 3, 79, 69, 72, 80, 21, 53, 64, 49, 0, 20, 13, 91, 23, 88},
                {84, 73, 75, 8, 15, 60, 72, 93, 57, 80, 89, 10, 69, 17, 59, 76, 28, 97, 31, 75, 68, 19, 7, 28, 94, 79, 92, 79, 58, 9, 14, 22, 38, 61, 64, 77, 25, 44, 70, 66, 99, 64, 65, 33, 43, 2, 74, 44, 20, 96, 75, 24, 77, 39, 83, 19, 80, 59, 25, 19, 78, 58, 41, 77, 17, 99, 43, 15, 30, 7, 81, 60, 30, 87, 23, 6, 21, 82, 66, 51, 47, 59, 78, 32, 16, 54, 93, 18, 78, 31, 2, 3, 92, 59, 15, 21, 37, 95, 8, 15},
                {0, 93, 19, 61, 64, 90, 36, 73, 41, 46, 34, 8, 66, 82, 85, 16, 48, 79, 33, 5, 12, 32, 0, 63, 73, 50, 83, 57, 87, 94, 97, 8, 96, 73, 26, 83, 0, 35, 8, 79, 52, 53, 24, 20, 11, 64, 35, 95, 98, 92, 51, 84, 38, 63, 62, 23, 13, 31, 7, 74, 17, 66, 37, 46, 73, 87, 32, 99, 82, 16, 73, 15, 89, 4, 58, 39, 12, 19, 92, 61, 98, 93, 11, 2, 29, 30, 88, 3, 31, 49, 17, 76, 13, 49, 37, 69, 73, 57, 34, 49},
                {18, 71, 77, 41, 90, 86, 50, 25, 88, 82, 37, 98, 75, 39, 68, 24, 44, 95, 27, 12, 84, 25, 74, 23, 46, 45, 67, 85, 88, 92, 12, 16, 32, 30, 92, 74, 44, 36, 34, 78, 7, 89, 89, 83, 62, 41, 92, 58, 95, 29, 42, 97, 72, 50, 98, 50, 32, 3, 3, 79, 24, 11, 78, 45, 65, 27, 53, 64, 30, 90, 83, 1, 9, 40, 25, 7, 55, 72, 6, 4, 82, 79, 18, 59, 58, 37, 58, 98, 23, 48, 3, 38, 15, 15, 44, 65, 72, 32, 8, 5},
                {41, 83, 45, 91, 6, 15, 40, 50, 53, 72, 21, 29, 21, 83, 70, 85, 63, 93, 75, 67, 32, 30, 26, 3, 54, 47, 58, 93, 20, 56, 78, 57, 41, 48, 8, 28, 7, 6, 99, 85, 69, 60, 46, 70, 0, 11, 38, 3, 82, 91, 96, 85, 5, 39, 53, 89, 12, 13, 56, 36, 83, 74, 10, 54, 65, 72, 32, 20, 34, 77, 24, 59, 47, 61, 85, 87, 20, 37, 95, 33, 36, 18, 64, 52, 88, 34, 70, 75, 38, 1, 97, 76, 68, 68, 76, 54, 10, 83, 28, 54},
                {45, 8, 90, 64, 58, 10, 6, 0, 23, 0, 36, 87, 37, 63, 19, 39, 76, 82, 5, 88, 40, 64, 99, 71, 60, 49, 93, 97, 48, 62, 90, 7, 59, 56, 30, 92, 7, 55, 61, 5, 63, 44, 42, 42, 29, 86, 8, 79, 97, 69, 53, 17, 85, 5, 60, 47, 45, 85, 81, 93, 38, 69, 69, 63, 80, 87, 78, 84, 66, 22, 62, 97, 23, 40, 52, 21, 59, 34, 5, 8, 3, 66, 82, 88, 6, 1, 38, 48, 93, 59, 66, 8, 73, 99, 8, 30, 80, 18, 10, 87},
                {6, 0, 25, 13, 71, 54, 23, 9, 20, 35, 92, 26, 86, 64, 13, 96, 2, 80, 15, 36, 74, 53, 7, 61, 61, 17, 76, 24, 24, 89, 1, 29, 36, 0, 98, 73, 8, 21, 9, 52, 15, 30, 59, 88, 39, 29, 37, 2, 11, 13, 60, 73, 26, 82, 65, 96, 93, 58, 50, 96, 14, 48, 15, 54, 60, 39, 20, 41, 8, 77, 5, 12, 49, 39, 20, 8, 56, 60, 2, 64, 71, 88, 33, 88, 32, 26, 6, 50, 54, 51, 92, 35, 68, 44, 41, 55, 49, 48, 37, 60},
                {61, 14, 80, 1, 94, 17, 84, 76, 35, 69, 85, 92, 54, 42, 38, 49, 17, 5, 34, 30, 12, 28, 99, 5, 17, 55, 66, 79, 88, 25, 95, 84, 26, 72, 60, 53, 82, 44, 99, 1, 87, 15, 89, 53, 41, 3, 71, 88, 11, 99, 19, 36, 50, 35, 75, 98, 33, 86, 98, 39, 89, 50, 32, 19, 75, 7, 61, 58, 12, 57, 97, 78, 32, 32, 23, 80, 64, 66, 12, 20, 59, 24, 56, 48, 29, 43, 80, 62, 96, 10, 62, 73, 71, 0, 42, 5, 36, 95, 18, 7},
                {97, 48, 62, 9, 90, 19, 14, 24, 39, 76, 1, 71, 14, 72, 50, 51, 53, 62, 6, 40, 66, 53, 70, 87, 51, 26, 70, 28, 93, 28, 7, 52, 68, 76, 18, 56, 50, 52, 35, 1, 25, 28, 29, 91, 83, 51, 11, 28, 93, 36, 80, 73, 4, 53, 36, 84, 76, 73, 52, 10, 94, 26, 81, 46, 74, 2, 56, 56, 42, 15, 77, 43, 75, 87, 10, 84, 30, 5, 51, 43, 82, 14, 88, 53, 56, 88, 90, 13, 88, 61, 68, 13, 76, 93, 31, 24, 83, 1, 6, 61},
                {40, 72, 40, 83, 85, 76, 50, 32, 99, 42, 96, 49, 67, 40, 32, 84, 28, 96, 24, 81, 48, 81, 98, 51, 38, 13, 61, 70, 70, 74, 46, 34, 67, 39, 13, 8, 78, 36, 62, 13, 18, 2, 65, 13, 70, 21, 62, 1, 19, 55, 85, 16, 87, 73, 34, 64, 80, 58, 60, 49, 32, 44, 38, 88, 63, 88, 15, 34, 55, 34, 71, 24, 64, 22, 91, 43, 17, 13, 72, 89, 53, 3, 57, 94, 11, 35, 56, 70, 94, 1, 16, 92, 73, 32, 80, 68, 40, 31, 99, 49},
                {39, 71, 23, 65, 51, 48, 32, 63, 72, 94, 95, 80, 27, 74, 37, 28, 97, 12, 11, 43, 28, 92, 75, 7, 52, 74, 57, 7, 67, 16, 31, 42, 91, 66, 87, 48, 5, 37, 56, 46, 48, 81, 96, 14, 35, 18, 4, 65, 80, 14, 53, 4, 42, 88, 60, 2, 90, 69, 21, 28, 2, 87, 66, 32, 11, 4, 39, 28, 29, 17, 18, 51, 49, 16, 69, 54, 75, 54, 67, 33, 82, 65, 24, 73, 29, 1, 76, 74, 55, 73, 76, 25, 23, 5, 90, 87, 74, 57, 55, 87},
                {71, 69, 30, 6, 15, 27, 35, 78, 81, 73, 33, 16, 36, 80, 25, 82, 99, 32, 25, 73, 6, 67, 30, 40, 29, 92, 79, 20, 82, 56, 46, 35, 39, 83, 92, 12, 89, 1, 37, 88, 87, 57, 22, 23, 65, 24, 9, 62, 70, 87, 50, 62, 0, 75, 7, 95, 96, 73, 81, 74, 12, 13, 34, 9, 14, 92, 97, 20, 84, 55, 97, 65, 4, 89, 31, 77, 71, 0, 94, 62, 61, 83, 52, 10, 25, 48, 79, 58, 20, 8, 69, 21, 43, 61, 70, 28, 50, 5, 25, 46},
                {23, 48, 98, 0, 48, 64, 27, 50, 59, 65, 57, 30, 4, 33, 74, 95, 44, 10, 45, 63, 1, 2, 67, 53, 49, 72, 5, 37, 25, 28, 67, 10, 75, 57, 8, 63, 72, 8, 95, 79, 24, 83, 38, 54, 3, 59, 69, 72, 98, 66, 55, 0, 7, 73, 34, 67, 91, 77, 57, 13, 46, 55, 95, 5, 28, 30, 66, 36, 94, 48, 10, 15, 95, 92, 45, 58, 23, 43, 84, 61, 87, 12, 7, 90, 95, 42, 90, 94, 32, 69, 56, 54, 41, 72, 6, 90, 41, 58, 37, 48},
                {40, 76, 24, 54, 16, 79, 41, 77, 6, 11, 11, 91, 66, 23, 47, 9, 56, 74, 3, 82, 77, 63, 3, 96, 98, 85, 11, 13, 0, 33, 22, 31, 21, 24, 22, 20, 70, 46, 0, 80, 22, 5, 75, 73, 88, 84, 49, 37, 14, 91, 34, 28, 58, 76, 14, 1, 53, 20, 98, 66, 34, 60, 59, 60, 29, 36, 35, 6, 6, 45, 8, 15, 74, 19, 79, 31, 93, 98, 34, 90, 49, 59, 19, 43, 26, 23, 13, 63, 75, 87, 96, 70, 98, 62, 25, 21, 36, 96, 84, 63},
                {96, 65, 43, 62, 98, 47, 88, 45, 96, 86, 34, 47, 81, 16, 29, 35, 10, 41, 12, 3, 42, 77, 57, 76, 66, 97, 0, 8, 26, 48, 24, 31, 95, 14, 79, 44, 90, 88, 69, 24, 78, 75, 85, 17, 18, 88, 12, 64, 62, 9, 47, 37, 76, 17, 83, 57, 38, 50, 16, 22, 52, 32, 83, 95, 80, 23, 86, 70, 27, 93, 74, 27, 82, 22, 19, 12, 25, 5, 65, 27, 77, 56, 46, 5, 56, 1, 96, 71, 0, 59, 29, 71, 88, 8, 18, 70, 63, 32, 6, 12},
                {59, 8, 72, 14, 86, 10, 28, 43, 1, 85, 67, 95, 4, 77, 56, 38, 86, 92, 24, 12, 6, 48, 63, 70, 24, 92, 48, 88, 99, 67, 52, 22, 52, 76, 26, 54, 3, 56, 96, 36, 18, 78, 26, 52, 71, 17, 55, 53, 23, 93, 82, 71, 77, 40, 33, 72, 75, 36, 54, 1, 93, 13, 60, 44, 37, 37, 77, 54, 16, 80, 78, 69, 44, 38, 23, 23, 65, 76, 9, 14, 73, 38, 54, 49, 88, 56, 97, 25, 93, 16, 75, 86, 49, 72, 98, 89, 30, 14, 8, 2},
                {11, 77, 60, 67, 7, 48, 93, 3, 63, 69, 24, 17, 58, 62, 25, 25, 40, 67, 77, 13, 74, 17, 4, 66, 98, 44, 30, 94, 99, 77, 32, 30, 65, 15, 72, 85, 39, 47, 5, 40, 77, 28, 2, 18, 12, 17, 38, 75, 93, 86, 19, 80, 67, 29, 64, 81, 49, 72, 99, 59, 96, 25, 51, 75, 29, 79, 71, 41, 32, 9, 86, 46, 86, 42, 24, 4, 93, 43, 50, 43, 90, 20, 5, 77, 98, 25, 87, 35, 46, 9, 47, 28, 42, 86, 36, 40, 69, 89, 82, 25},
                {55, 45, 61, 82, 59, 39, 98, 80, 72, 36, 56, 74, 68, 66, 20, 53, 85, 65, 30, 89, 12, 19, 12, 64, 31, 12, 76, 29, 42, 12, 99, 86, 91, 39, 40, 7, 88, 18, 88, 90, 17, 35, 68, 86, 18, 55, 76, 20, 55, 34, 16, 66, 80, 36, 16, 1, 33, 83, 69, 86, 35, 60, 19, 20, 36, 55, 62, 65, 20, 7, 34, 97, 53, 50, 63, 58, 2, 36, 65, 54, 68, 90, 9, 15, 30, 91, 77, 85, 55, 87, 59, 24, 2, 26, 10, 43, 18, 40, 92, 72},
                {8, 43, 88, 15, 78, 92, 24, 63, 2, 36, 91, 67, 4, 10, 82, 90, 13, 82, 60, 9, 77, 24, 61, 30, 80, 98, 20, 26, 21, 8, 73, 49, 3, 54, 18, 82, 6, 73, 16, 63, 2, 28, 82, 70, 72, 47, 54, 41, 66, 97, 2, 88, 71, 10, 15, 89, 92, 63, 80, 46, 82, 26, 22, 3, 14, 23, 75, 43, 40, 94, 42, 97, 64, 88, 58, 20, 54, 15, 70, 43, 20, 57, 29, 52, 2, 93, 46, 11, 59, 2, 36, 15, 59, 70, 9, 3, 9, 15, 57, 78}
        };

        int[] testAfterSolution = new int[]{89, 43, 93, 71, 95, 28, 64, 19, 11, 76, 68, 62, 40, 29, 27, 15, 91, 38, 17, 16, 34, 39, 86, 78, 67, 99, 50, 53, 74, 25, 98, 3, 51, 66, 87, 33, 26, 65, 85, 48, 75, 60, 77, 31, 36, 12, 2, 59, 49, 18, 61, 42, 32, 35, 84, 1, 45, 58, 88, 81, 63, 80, 7, 46, 23, 82, 92, 83, 55, 9, 73, 6, 54, 41, 57, 4, 10, 52, 21, 13, 20, 69, 0, 14, 97, 8, 47, 56, 37, 72, 30, 5, 94, 22, 96, 24, 79, 44, 90, 70};

        int[] testSolutions = satisfactionOptimizer.calcCSO(testLargeMatrix);

        for (int i = 0; i < testLargeMatrix.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterSolution[i] + " Actual: " + testSolutions[i],
                    testAfterSolution[i], testSolutions[i]);
        }
    }

    @Test
    public void testCalcCEOTestsMatrices() {
        int[][][] TestMatrixs = {
                {
                        {0, 1, 0, 0, 5},
                        {1, 0, 3, 4, 5},
                        {7, 0, 0, 4, 5},
                        {9, 0, 3, 4, 5},
                        {3, 0, 3, 4, 5}
                },
                {
                        {1, 1, 0, 1},
                        {1, 0, 0, 1},
                        {0, 0, 1, 1},
                        {0, 1, 1, 1}
                },
                {
                        {1, 1, 1, 1, 1, 1},
                        {1, 1, 1, 0, 1, 1},
                        {1, 1, 0, 0, 1, 1},
                        {1, 0, 0, 1, 1, 1},
                        {1, 0, 1, 1, 1, 1},
                        {1, 1, 1, 1, 1, 1}
                }};
        int[][][] testAfterMatrix = {
                {
                        {0, 1, 0, 0, 5},
                        {1, 0, 3, 4, 5},
                        {7, 0, 0, 4, 5},
                        {9, 0, 3, 4, 5},
                        {3, 0, 3, 4, 5}
                },
                {
                        {1, 1, 0, 1},
                        {1, 0, 0, 1},
                        {0, 0, 1, 1},
                        {0, 1, 1, 1}
                },
                {
                        {1, 1, 1, 1, 1, 1},
                        {1, 1, 1, 0, 1, 1},
                        {1, 1, 0, 0, 1, 1},
                        {1, 0, 0, 1, 1, 1},
                        {1, 0, 1, 1, 1, 1},
                        {1, 1, 1, 1, 1, 1}
                }};


        int[][] testAfterSolution = new int[][]{{3, 0, 4, 2, 1}, {0, 3, 2, 1}, {0, 1, 4, 3, 2, 5}};

        for (int m = 0; m < TestMatrixs.length; m++) {

            int[] testSolutions = satisfactionOptimizer.calcCSO(TestMatrixs[m]);

            for (int i = 0; i < TestMatrixs[m].length; i++) {
                assertSame("Wrong Value Expected: " + testAfterSolution[m][i] + " Actual: " + testSolutions[i],
                        testAfterSolution[m][i], testSolutions[i]);

                for (int j = 0; j < TestMatrixs[m][i].length; j++) {
                    assertSame("Wrong Value Expected: " + testAfterMatrix[m][i][j] + " Actual: " + TestMatrixs[m][i][j],
                            testAfterMatrix[m][i][j], TestMatrixs[m][i][j]);
                }
            }
        }

    }

    @Test
    public void testCalcCSOAllZero() {
        int[][] testZeroMatrix = new int[100][100];
        int[] testAfterSolution = new int[100];
        for(int i =0;i<100;i++) {
            testAfterSolution[i] = i;
        }
        int[][] testAfterMatrix = new int[100][100];
        int[] testSolutions = satisfactionOptimizer.calcCSO(testZeroMatrix);

        for (int i = 0; i < testZeroMatrix.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterSolution[i] + " Actual: " + testSolutions[i],
                    testAfterSolution[i], testSolutions[i]);

            for (int j = 0; j < testZeroMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterMatrix[i][j] + " Actual: " + testZeroMatrix[i][j],
                        testAfterMatrix[i][j], testZeroMatrix[i][j]);
            }
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testCalcCSOLength() {
        satisfactionOptimizer.calcCSO(new int[0][0]);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testCalcCSONull() {
        satisfactionOptimizer.calcCSO(null);
    }

    // Copy2DArray Tests
    @Test
    public void TestCopy2DArray() {
        int[][] test = satisfactionOptimizer.copy2DArray(testMatrix);
        for (int i = 0; i < testMatrix.length; i++) {
            for (int j = 0; j < testMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + test[i][j] + " Actual: " + testMatrix[i][j], test[i][j], testMatrix[i][j]);
            }
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void TestCopy2DArrayZeroLength() {
        satisfactionOptimizer.copy2DArray(new int[0][0]);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void TestCopy2DArrayNull() {
        satisfactionOptimizer.copy2DArray(null);
    }

    // ReverseMinMax Tests
    @Test
    public void testReverseMinMax() {
        int[][] testReverseMatrix = new int[][]{{2, 1, 0}, {0, 1, 2}, {0, 1, 2}};


        int[][] afterReverse = satisfactionOptimizer.reverseMinMax(testMatrix);


        for (int i = 0; i < afterReverse.length; i++) {
            for (int j = 0; j < afterReverse[i].length; j++) {
                assertSame("Wrong Value Expected: " + testReverseMatrix[i][j] + " Actual: " + afterReverse[i][j],
                        testReverseMatrix[i][j], afterReverse[i][j]);
            }
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testReverseMinMaxNull() {
        satisfactionOptimizer.reverseMinMax(null);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testReverseMinMaxZeroLength() {
        satisfactionOptimizer.reverseMinMax(new int[0][0]);
    }


    //ReduceMatrixRowAndCol Tests
    @Test
    public void testReduceMatrixRowAndCol() {
        int[][] testReduceRowColMatrix = new int[][]{{0, 0, 2}, {2, 0, 0}, {2, 0, 0}};
        satisfactionOptimizer.reduceMatrix(testMatrix);
        for (int i = 0; i < testMatrix.length; i++) {
            for (int j = 0; j < testMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testReduceRowColMatrix[i][j] + " Actual: " + testMatrix[i][j],
                        testReduceRowColMatrix[i][j], testMatrix[i][j]);
            }
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testReduceMatrixRowAndColNull() {
        satisfactionOptimizer.reduceMatrix(null);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testReduceMatrixRowAndColZeroLength() {
        satisfactionOptimizer.reduceMatrix(new int[0][0]);
    }

    @Test
    public void testReduceMatrixRow() {
        int[][] testReduceRowMatrix = new int[][]{{0, 0, 2}, {2, 0, 0}, {2, 0, 0}};
        satisfactionOptimizer.reduceMatrix(testMatrix);
        for (int i = 0; i < testMatrix.length; i++) {
            for (int j = 0; j < testMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testReduceRowMatrix[i][j] + " Actual: " + testMatrix[i][j],
                        testReduceRowMatrix[i][j], testMatrix[i][j]);
            }
        }
    }

    @Test
    public void testReduceMatrixCol() {
        int[][] testReduceColMatrix = new int[][]{{0, 0, 2}, {2, 0, 0}, {2, 0, 0}};
        satisfactionOptimizer.reduceMatrix(testMatrix);
        for (int i = 0; i < testMatrix.length; i++) {
            for (int j = 0; j < testMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testReduceColMatrix[i][j] + " Actual: " + testMatrix[i][j],
                        testReduceColMatrix[i][j], testMatrix[i][j]);
            }
        }
    }

    @Test
    public void testReduceMatrixNoChange() {
        int[][] testReduce = new int[5][5];

        satisfactionOptimizer.reduceMatrix(testReduce);

        int[][] testAfterReduce = new int[][]{
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}
        };

        for (int i = 0; i < testReduce.length; i++) {
            for (int j = 0; j < testReduce[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterReduce[i][j] + " Actual: " + testReduce[i][j],
                        testAfterReduce[i][j], testReduce[i][j]);
            }
        }
    }

    //MarkTheZeroRows Tests
    @Test
    public void testMarkTheZeroRows() {

        int[] testMRows = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        satisfactionOptimizer.markTheZeroRows(testMatrix, testMRows, testMCols);

        int[] testAfterMRows = new int[]{0, 0, 0};
        int[] testAfterMCols = new int[]{0, 0, 0};
        int[][] testAfterMatrix = new int[][]{{0, 1, 2}, {2, 1, 0}, {2, 1, 0}};

        for (int i = 0; i < testMatrix.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterMRows[i] + " Actual: " + testMRows[i],
                    testAfterMRows[i], testMRows[i]);
            assertSame("Wrong Value Expected: " + testAfterMCols[i] + " Actual: " + testMCols[i],
                    testAfterMCols[i], testMCols[i]);
            for (int j = 0; j < testMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterMatrix[i][j] + " Actual: " + testMatrix[i][j],
                        testAfterMatrix[i][j], testMatrix[i][j]);
            }
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testMarkTheZeroRowsNull() {

        int[] testMRows = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        satisfactionOptimizer.markTheZeroRows(null, testMRows, testMCols);
        satisfactionOptimizer.markTheZeroRows(testMatrix, null, testMCols);
        satisfactionOptimizer.markTheZeroRows(testMatrix, testMRows, null);
        satisfactionOptimizer.markTheZeroRows(null, null, null);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testMarkTheZeroRowsZeroLength() {
        int[] testMRows = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        satisfactionOptimizer.markTheZeroRows(new int[0][0], testMRows, testMCols);
        satisfactionOptimizer.markTheZeroRows(testMatrix, new int[0], testMCols);
        satisfactionOptimizer.markTheZeroRows(testMatrix, testMRows, new int[0]);
        satisfactionOptimizer.markTheZeroRows(new int[0][0], new int[0], new int[0]);
    }


    //CheckForSolution Tests
    @Test
    public void testCheckForSolutionNoSolution() {
        int[] testNoSolution = new int[]{0, 0, 0};
        assertFalse("No Solution Input, but Solution Output ", satisfactionOptimizer.checkForSolution(testNoSolution));
    }

    @Test
    public void testCheckForSolutionHasSolution() {
        int[] testSolution = new int[]{1, 1, 1};
        assertTrue("Solution Input, but No Solution Output ", satisfactionOptimizer.checkForSolution(testSolution));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testCheckForSolutionNull() {
        satisfactionOptimizer.checkForSolution(null);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testCheckForSolutionZeroLength() {
        satisfactionOptimizer.checkForSolution(new int[0]);
    }


    //AdjustElements Tests
    @Test
    public void testAdjustElements() {
        int[] testSolZero = new int[]{4, 3};
        int[] testZerosByRow = new int[]{1, 5, 0, 2, -1, 3};
        int[] testZerosByCol = new int[]{2, 0, 3, 5, -1, 1};
        int[] testOnlyZeroByRow = new int[]{-1, -1, -1, -1, 3, 4};

        satisfactionOptimizer.adjustElements(testSolZero, testZerosByRow, testZerosByCol, testOnlyZeroByRow);

        int[] testAfterSolZero = new int[]{4, 3};
        int[] testAfterZerosByRow = new int[]{1, 5, 0, 2, 3, 4};
        int[] testAfterZerosByCol = new int[]{2, 0, 3, 4, 5, 1};
        int[] testAfterOnlyZeroByRow = new int[]{-1, -1, -1, -1, 3, 4};


        for (int i = 0; i < testSolZero.length; i++) {

            assertSame("Wrong Value Expected: " + testAfterSolZero[i] + " Actual: " + testSolZero[i],
                    testAfterSolZero[i], testSolZero[i]);
        }
        for (int i = 0; i < testZerosByRow.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByRow[i] + " Actual: " + testZerosByRow[i],
                    testAfterZerosByRow[i], testZerosByRow[i]);

            assertSame("Wrong Value Expected: " + testAfterZerosByCol[i] + " Actual: " + testZerosByCol[i],
                    testAfterZerosByCol[i], testZerosByCol[i]);

            assertSame("Wrong Value Expected: " + testAfterOnlyZeroByRow[i] + " Actual: " + testOnlyZeroByRow[i],
                    testAfterOnlyZeroByRow[i], testOnlyZeroByRow[i]);
        }
    }

    @Test
    public void testAdjustElementsNoChange() {
        int[] testSolZero = new int[]{4, 3};
        int[] testZerosByRow = new int[]{1, 5, 0, 2, -1, 3};
        int[] testZerosByCol = new int[]{2, 0, 3, -1, -1, 1};
        int[] testOnlyZeroByRow = new int[]{-1, -1, -1, -1, 3, 4};

        satisfactionOptimizer.adjustElements(testSolZero, testZerosByRow, testZerosByCol, testOnlyZeroByRow);

        int[] testAfterSolZero = new int[]{4, 3};
        int[] testAfterZerosByRow = new int[]{1, 5, 0, 2, 3, 3};
        int[] testAfterZerosByCol = new int[]{2, 0, 3, 4, -1, 1};
        int[] testAfterOnlyZeroByRow = new int[]{-1, -1, -1, -1, 3, 4};

        for (int i = 0; i < testSolZero.length; i++) {

            assertSame("Wrong Value Expected: " + testAfterSolZero[i] + " Actual: " + testSolZero[i],
                    testAfterSolZero[i], testSolZero[i]);
        }

        for (int i = 0; i < testZerosByRow.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByRow[i] + " Actual: " + testZerosByRow[i],
                    testAfterZerosByRow[i], testZerosByRow[i]);

            assertSame("Wrong Value Expected: " + testAfterZerosByCol[i] + " Actual: " + testZerosByCol[i],
                    testAfterZerosByCol[i], testZerosByCol[i]);

            assertSame("Wrong Value Expected: " + testAfterOnlyZeroByRow[i] + " Actual: " + testOnlyZeroByRow[i],
                    testAfterOnlyZeroByRow[i], testOnlyZeroByRow[i]);
        }
    }

    @Test
    public void testAdjustElementsMatchedPairs() {
        int[] testSolZero = new int[]{0, 1};
        int[] testZerosByRow = new int[]{1, 1, 1};
        int[] testZerosByCol = new int[]{1, 1, 1};
        int[] testOnlyZeroByRow = new int[]{-1, -1, -1};

        satisfactionOptimizer.adjustElements(testSolZero, testZerosByRow, testZerosByCol, testOnlyZeroByRow);

        int[] testAfterSolZero = new int[]{0, 1};
        int[] testAfterZerosByRow = new int[]{1, -1, 1};
        int[] testAfterZerosByCol = new int[]{1, -1, 1};
        int[] testAfterOnlyZeroByRow = new int[]{-1, -1, -1};

        for (int i = 0; i < testSolZero.length; i++) {

            assertSame("Wrong Value Expected: " + testAfterSolZero[i] + " Actual: " + testSolZero[i],
                    testAfterSolZero[i], testSolZero[i]);
        }

        for (int i = 0; i < testZerosByRow.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByRow[i] + " Actual: " + testZerosByRow[i],
                    testAfterZerosByRow[i], testZerosByRow[i]);

            assertSame("Wrong Value Expected: " + testAfterZerosByCol[i] + " Actual: " + testZerosByCol[i],
                    testAfterZerosByCol[i], testZerosByCol[i]);

            assertSame("Wrong Value Expected: " + testAfterOnlyZeroByRow[i] + " Actual: " + testOnlyZeroByRow[i],
                    testAfterOnlyZeroByRow[i], testOnlyZeroByRow[i]);
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testAdjustElementsNull() {
        int[] testSolZero = new int[testMatrix.length];
        int[] testZerosByRow = new int[testMatrix.length];
        int[] testZerosByCol = new int[testMatrix.length];
        int[] testOnlyZeroByRow = new int[testMatrix.length];

        satisfactionOptimizer.adjustElements(null, testZerosByRow, testZerosByCol, testOnlyZeroByRow);
        satisfactionOptimizer.adjustElements(testSolZero, null, testZerosByCol, testOnlyZeroByRow);
        satisfactionOptimizer.adjustElements(testSolZero, testZerosByRow, null, testOnlyZeroByRow);
        satisfactionOptimizer.adjustElements(testSolZero, testZerosByRow, testZerosByCol, null);
        satisfactionOptimizer.adjustElements(null, null, null, null);
    }


    @Test(expected = IndexOutOfBoundsException.class)
    public void testAdjustElementsLength() {
        int[] testSolZero = new int[testMatrix.length];
        int[] testZerosByRow = new int[testMatrix.length];
        int[] testZerosByCol = new int[testMatrix.length];
        int[] testOnlyZeroByRow = new int[testMatrix.length];

        satisfactionOptimizer.adjustElements(new int[0], testZerosByRow, testZerosByCol, testOnlyZeroByRow);
        satisfactionOptimizer.adjustElements(testSolZero, new int[0], testZerosByCol, testOnlyZeroByRow);
        satisfactionOptimizer.adjustElements(testSolZero, testZerosByRow, new int[0], testOnlyZeroByRow);
        satisfactionOptimizer.adjustElements(testSolZero, testZerosByRow, testZerosByCol, new int[0]);
        satisfactionOptimizer.adjustElements(new int[0], new int[0], new int[0], new int[0]);
    }

    //initZeros Tests
    @Test
    public void testInitZeros() {
        int[][] testInitZerosMatrix = new int[][]{{0, 1, 2}, {2, 1, 0}, {2, 1, 0}};
        int[] testZerosByRow = new int[]{-1, -1, -1};
        int[] testZerosByCol = new int[]{-1, -1, -1};

        satisfactionOptimizer.initZeros(testInitZerosMatrix, testZerosByRow, testZerosByCol);

        int[][] testAfterMatrix = new int[][]{{0, 1, 2}, {2, 1, 0}, {2, 1, 0}};
        int[] testAfterZerosByRow = new int[]{0, 2, -1};
        int[] testAfterZerosByCol = new int[]{0, -1, 1};

        for (int i = 0; i < testZerosByRow.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByRow[i] + " Actual: " + testZerosByRow[i],
                    testAfterZerosByRow[i], testZerosByRow[i]);

            assertSame("Wrong Value Expected: " + testAfterZerosByCol[i] + " Actual: " + testZerosByCol[i],
                    testAfterZerosByCol[i], testZerosByCol[i]);

            for (int j = 0; j < testInitZerosMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterMatrix[i][j] + " Actual: " + testInitZerosMatrix[i][j],
                        testAfterMatrix[i][j], testInitZerosMatrix[i][j]);
            }

        }
    }


    @Test(expected = IndexOutOfBoundsException.class)
    public void testInitZerosNull() {
        int[] testZerosByRow = new int[testMatrix.length];
        int[] testZerosByCol = new int[testMatrix.length];

        satisfactionOptimizer.initZeros(null, testZerosByRow, testZerosByCol);
        satisfactionOptimizer.initZeros(testMatrix, null, testZerosByCol);
        satisfactionOptimizer.initZeros(testMatrix, testZerosByRow, null);
        satisfactionOptimizer.initZeros(null, null, null);
    }


    @Test(expected = IndexOutOfBoundsException.class)
    public void testInitZerosLength() {
        int[] testZerosByRow = new int[testMatrix.length];
        int[] testZerosByCol = new int[testMatrix.length];

        satisfactionOptimizer.initZeros(new int[0][0], testZerosByRow, testZerosByCol);
        satisfactionOptimizer.initZeros(testMatrix, new int[0], testZerosByCol);
        satisfactionOptimizer.initZeros(testMatrix, testZerosByRow, new int[0]);
        satisfactionOptimizer.initZeros(new int[0][0], new int[0], new int[0]);
    }

    //UnmatchedZeroCheck Tests
    @Test
    public void testUnmatchedZeroCheckWithReturn() {
        int[][] testUnmatchedMatrix = new int[][]{{1, 1, 2}, {2, 0, 1}, {2, 2, 1}};
        int[] testZerosByRow = new int[]{-1, -1, -1};
        int[] testMRows = new int[]{-1, -1, -1};
        int[] testMCols = new int[]{-1, 0, -1};

        int[] testReturn = satisfactionOptimizer.unmatchedZeroCheck(testUnmatchedMatrix, testZerosByRow, testMRows, testMCols);

        int[][] testAfterUnmatchedMatrix = new int[][]{{1, 1, 2}, {2, 0, 1}, {2, 2, 1}};
        int[] testAfterZerosByRow = new int[]{-1, 1, -1};
        int[] testAfterMRows = new int[]{-1, -1, -1};
        int[] testAfterMCols = new int[]{-1, 0, -1};
        int[] testAfterReturn = new int[]{1, 1};

        assertNotNull("Return was Null", testReturn);

        for (int i = 0; i < testReturn.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterReturn[i] + " Actual: " + testReturn[i],
                    testAfterReturn[i], testReturn[i]);
        }

        for (int i = 0; i < testMatrix.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByRow[i] + " Actual: " + testZerosByRow[i],
                    testAfterZerosByRow[i], testZerosByRow[i]);
            assertSame("Wrong Value Expected: " + testAfterMRows[i] + " Actual: " + testMRows[i],
                    testAfterMRows[i], testMRows[i]);
            assertSame("Wrong Value Expected: " + testAfterMCols[i] + " Actual: " + testMCols[i],
                    testAfterMCols[i], testMCols[i]);
            for (int j = 0; j < testUnmatchedMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterUnmatchedMatrix[i][j] + " Actual: " + testUnmatchedMatrix[i][j],
                        testAfterUnmatchedMatrix[i][j], testUnmatchedMatrix[i][j]);
            }
        }
    }

    @Test
    public void testUnmatchedZeroCheckReturnNull() {
        int[] testZerosByRow = new int[testMatrix.length];
        int[] testMRows = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        int[] testReturn = satisfactionOptimizer.unmatchedZeroCheck(testMatrix, testZerosByRow, testMRows, testMCols);

        int[] testAfterZerosByRow = new int[]{0, 0, 0};
        int[] testAfterMRows = new int[]{0, 0, 0};
        int[] testAfterMCols = new int[]{0, 0, 0};
        int[][] testAfterMatrix = new int[][]{{1, 2, 3}, {3, 2, 1}, {3, 2, 1}};


        assertNull("Return was not Null", testReturn);

        for (int i = 0; i < testMatrix.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByRow[i] + " Actual: " + testZerosByRow[i],
                    testAfterZerosByRow[i], testZerosByRow[i]);
            assertSame("Wrong Value Expected: " + testAfterMRows[i] + " Actual: " + testMRows[i],
                    testAfterMRows[i], testMRows[i]);
            assertSame("Wrong Value Expected: " + testAfterMCols[i] + " Actual: " + testMCols[i],
                    testAfterMCols[i], testMCols[i]);
            for (int j = 0; j < testMatrix[i].length; j++) {
                assertSame("Wrong Value Expected: " + testAfterMatrix[i][j] + " Actual: " + testMatrix[i][j],
                        testAfterMatrix[i][j], testMatrix[i][j]);
            }
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testUnmatchedZeroCheckNull() {
        int[] testZerosByRow = new int[testMatrix.length];
        int[] testMRows = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        satisfactionOptimizer.unmatchedZeroCheck(null, testZerosByRow, testMRows, testMCols);
        satisfactionOptimizer.unmatchedZeroCheck(testMatrix, null, testMRows, testMCols);
        satisfactionOptimizer.unmatchedZeroCheck(testMatrix, testZerosByRow, null, testMCols);
        satisfactionOptimizer.unmatchedZeroCheck(testMatrix, testZerosByRow, testMRows, null);
        satisfactionOptimizer.unmatchedZeroCheck(null, null, null, null);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testUnmatchedZeroCheckLength() {
        int[] testZerosByRow = new int[testMatrix.length];
        int[] testMRows = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        satisfactionOptimizer.unmatchedZeroCheck(new int[0][0], testZerosByRow, testMRows, testMCols);
        satisfactionOptimizer.unmatchedZeroCheck(testMatrix, new int[0], testMRows, testMCols);
        satisfactionOptimizer.unmatchedZeroCheck(testMatrix, testZerosByRow, new int[0], testMCols);
        satisfactionOptimizer.unmatchedZeroCheck(testMatrix, testZerosByRow, testMRows, new int[0]);
        satisfactionOptimizer.unmatchedZeroCheck(new int[0][0], new int[0], new int[0], new int[0]);
    }


    //UnmatchedZeroCheck Tests
    @Test
    public void testMarkMatchedColumnsZeroes() {
        int[] testZerosByCol = new int[]{0, 0, 0};
        int[] testMCols = new int[]{0, 0, 0};

        satisfactionOptimizer.markMatchedColumnsZeroes(testZerosByCol, testMCols);

        int[] testAfterZerosByCol = new int[]{0, 0, 0};
        int[] testAfterMCols = new int[]{1, 1, 1};

        for (int i = 0; i < testZerosByCol.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByCol[i] + " Actual: " + testZerosByCol[i],
                    testAfterZerosByCol[i], testZerosByCol[i]);
            assertSame("Wrong Value Expected: " + testAfterMCols[i] + " Actual: " + testMCols[i],
                    testAfterMCols[i], testMCols[i]);
        }
    }

    @Test
    public void testMarkMatchedColumnsZeroesNOChange() {
        int[] testZerosByCol = new int[]{-1, -1, -1};
        int[] testMCols = new int[]{0, 0, 0};

        satisfactionOptimizer.markMatchedColumnsZeroes(testZerosByCol, testMCols);

        int[] testAfterZerosByCol = new int[]{-1, -1, -1};
        int[] testAfterMCols = new int[]{0, 0, 0};

        for (int i = 0; i < testZerosByCol.length; i++) {
            assertSame("Wrong Value Expected: " + testAfterZerosByCol[i] + " Actual: " + testZerosByCol[i],
                    testAfterZerosByCol[i], testZerosByCol[i]);
            assertSame("Wrong Value Expected: " + testAfterMCols[i] + " Actual: " + testMCols[i],
                    testAfterMCols[i], testMCols[i]);
        }
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testMarkMatchedColumnsZeroeskNull() {
        int[] testZerosByCol = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        satisfactionOptimizer.markMatchedColumnsZeroes(null, testMCols);
        satisfactionOptimizer.markMatchedColumnsZeroes(testZerosByCol, null);
        satisfactionOptimizer.markMatchedColumnsZeroes(null, null);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testUMarkMatchedColumnsZeroesLength() {
        int[] testZerosByCol = new int[testMatrix.length];
        int[] testMCols = new int[testMatrix.length];

        satisfactionOptimizer.markMatchedColumnsZeroes(new int[0], testMCols);
        satisfactionOptimizer.markMatchedColumnsZeroes(testZerosByCol, new int[0]);
        satisfactionOptimizer.markMatchedColumnsZeroes(new int[0], new int[0]);
    }

}


